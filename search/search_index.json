{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vizro","text":"<p>Vizro is a toolkit for creating modular data visualisation applications</p>"},{"location":"pages/API_reference/actions/","title":"Actions","text":"<p>API reference for all pre-defined action functions.</p>"},{"location":"pages/API_reference/actions/#vizro.actions","title":"vizro.actions","text":""},{"location":"pages/API_reference/actions/#vizro.actions.export_data","title":"export_data","text":"<pre><code>export_data(targets=None, file_format='csv', **inputs)\n</code></pre> <p>Exports visible data of target charts/components on page after being triggered.</p> <p>Parameters:</p> <ul> <li> targets             (<code>Optional[List[str]]</code>, default:                 <code>None</code> )         \u2013          <p>List of target component ids to download data from. Defaults to None.</p> </li> <li> file_format             (<code>Literal['csv', 'xlsx']</code>, default:                 <code>'csv'</code> )         \u2013          <p>Format of downloaded files. Defaults to <code>csv</code>.</p> </li> <li> inputs             (<code>Dict[str, Any]</code>, default:                 <code>{}</code> )         \u2013          <p>Dict mapping action function names with their inputs e.g. inputs = {'filters': [], 'parameters': ['gdpPercap'], 'filter_interaction': [], 'theme_selector': True}</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>If unknown file extension is provided.</p> </li> <li> <code>ValueError</code>           \u2013          <p>If target component does not exist on page.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Dict[str, Any]</code>         \u2013          <p>Dict mapping target component id to modified charts/components e.g. {'my_scatter': Figure({})}</p> </li> </ul>"},{"location":"pages/API_reference/actions/#vizro.actions.filter_interaction","title":"filter_interaction","text":"<pre><code>filter_interaction(targets=None, **inputs)\n</code></pre> <p>Filters targeted charts/components on page by clicking on data points of the source chart.</p> <p>To set up filtering on specific columns of the target chart(s), include these columns in the 'custom_data' parameter of the source chart e.g. <code>px.bar(..., custom_data=[\"species\", \"sepal_length\"])</code></p> <p>Parameters:</p> <ul> <li> targets             (<code>Optional[List[str]]</code>, default:                 <code>None</code> )         \u2013          <p>List of target component ids to filter by chart interaction. If missing, will target all valid components on page. Defaults to None.</p> </li> <li> inputs             (<code>Dict[str, Any]</code>, default:                 <code>{}</code> )         \u2013          <p>Dict mapping action function names with their inputs e.g. inputs = {'filters': [], 'parameters': ['gdpPercap'], 'filter_interaction': [], 'theme_selector': True}</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Dict[str, Any]</code>         \u2013          <p>Dict mapping target component ids to modified charts/components e.g. {'my_scatter': Figure({})}</p> </li> </ul>"},{"location":"pages/API_reference/manager/","title":"Data Manager","text":""},{"location":"pages/API_reference/manager/#vizro.managers._data_manager","title":"vizro.managers._data_manager","text":"<p>The data manager handles access to all DataFrames used in a Vizro app.</p>"},{"location":"pages/API_reference/manager/#vizro.managers._data_manager.DataManager","title":"DataManager","text":"<pre><code>DataManager()\n</code></pre> <p>Object to handle all data for the <code>vizro</code> application.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import plotly.express as px\n&gt;&gt;&gt; data_manager[\"iris\"] = px.data.iris()\n</code></pre>"},{"location":"pages/API_reference/manager/#vizro.managers._data_manager.DataManager.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(dataset_name, data)\n</code></pre> <p>Adds <code>data</code> to the <code>DataManager</code> with key <code>dataset_name</code>.</p> <p>This is the only user-facing function when configuring a simple dashboard. Others are only used internally in Vizro or advanced users who write their own actions.</p>"},{"location":"pages/API_reference/models/","title":"Models","text":"<p>API reference for all <code>pydantic</code> models used.</p>"},{"location":"pages/API_reference/models/#vizro.models","title":"vizro.models","text":""},{"location":"pages/API_reference/models/#vizro.models.Action","title":"Action","text":"<p>             Bases: <code>VizroBaseModel</code></p> <p>Action to be inserted into <code>actions</code> of relevant component.</p> <p>Parameters:</p> <ul> <li> function             (<code>CapturedCallable</code>)         \u2013          <p>See <code>CapturedCallable</code>.</p> </li> <li> inputs             (<code>List[str]</code>)         \u2013          <p>Inputs in the form <code>&lt;component_id&gt;.&lt;property&gt;</code> passed to the action function. Defaults to <code>[]</code>.</p> </li> <li> outputs             (<code>List[str]</code>)         \u2013          <p>Outputs in the form <code>&lt;component_id&gt;.&lt;property&gt;</code> changed by the action function. Defaults to <code>[]</code>.</p> </li> </ul>"},{"location":"pages/API_reference/models/#vizro.models.Button","title":"Button","text":"<p>             Bases: <code>VizroBaseModel</code></p> <p>Component provided to <code>Page</code> to trigger any defined <code>action</code> in <code>Page</code>.</p> <p>Parameters:</p> <ul> <li> type             (<code>Literal['button']</code>)         \u2013          <p>Defaults to <code>\"button\"</code>.</p> </li> <li> text             (<code>str</code>)         \u2013          <p>Text to be displayed on button. Defaults to <code>\"Click me!\"</code>.</p> </li> <li> actions             (<code>List[Action]</code>)         \u2013          <p>See <code>Action</code>. Defaults to <code>[]</code>.</p> </li> </ul>"},{"location":"pages/API_reference/models/#vizro.models.Card","title":"Card","text":"<p>             Bases: <code>VizroBaseModel</code></p> <p>Creates a card utilizing <code>dcc.Markdown</code> as title and text component.</p> <p>Parameters:</p> <ul> <li> type             (<code>Literal['card']</code>)         \u2013          <p>Defaults to <code>\"card\"</code>.</p> </li> <li> text             (<code>str</code>)         \u2013          <p>Markdown string to create card title/text that should adhere to the CommonMark Spec.</p> </li> <li> href             (<code>Optional[str]</code>)         \u2013          <p>URL (relative or absolute) to navigate to. If not provided the Card serves as a text card only. Defaults to None.</p> </li> </ul>"},{"location":"pages/API_reference/models/#vizro.models.Checklist","title":"Checklist","text":"<p>             Bases: <code>VizroBaseModel</code></p> <p>Categorical multi-selector <code>Checklist</code> to be provided to <code>Filter</code>.</p> <p>Parameters:</p> <ul> <li> type             (<code>Literal['checklist']</code>)         \u2013          <p>Defaults to <code>\"checklist\"</code>.</p> </li> <li> options             (<code>OptionsType</code>)         \u2013          <p>See <code>OptionsType</code>. Defaults to <code>[]</code>.</p> </li> <li> value             (<code>Optional[MultiValueType]</code>)         \u2013          <p>See <code>MultiValueType</code>. Defaults to <code>None</code>.</p> </li> <li> title             (<code>Optional[str]</code>)         \u2013          <p>Title to be displayed. Defaults to <code>None</code>.</p> </li> <li> actions             (<code>List[Action]</code>)         \u2013          <p>See <code>Action</code>. Defaults to <code>[]</code>.</p> </li> </ul>"},{"location":"pages/API_reference/models/#vizro.models.Dashboard","title":"Dashboard","text":"<pre><code>Dashboard(*args, **kwargs)\n</code></pre> <p>             Bases: <code>VizroBaseModel</code></p> <p>Vizro Dashboard to be used within <code>Vizro</code>.</p> <p>Parameters:</p> <ul> <li> pages             (<code>List[Page]</code>)         \u2013          <p>See <code>Page</code>.</p> </li> <li> theme             (<code>Literal['vizro_dark', 'vizro_light']</code>)         \u2013          <p>Layout theme to be applied across dashboard. Defaults to <code>vizro_dark</code>.</p> </li> <li> navigation             (<code>Optional[Navigation]</code>)         \u2013          <p>See <code>Navigation</code>. Defaults to <code>None</code>.</p> </li> </ul>"},{"location":"pages/API_reference/models/#vizro.models.Dropdown","title":"Dropdown","text":"<p>             Bases: <code>VizroBaseModel</code></p> <p>Categorical multi-selector <code>Dropdown</code> to be provided to <code>Filter</code>.</p> <p>Parameters:</p> <ul> <li> type             (<code>Literal['dropdown']</code>)         \u2013          <p>Defaults to <code>\"dropdown\"</code>.</p> </li> <li> options             (<code>OptionsType</code>)         \u2013          <p>See <code>OptionsType</code>. Defaults to <code>[]</code>.</p> </li> <li> value             (<code>Optional[Union[SingleValueType, MultiValueType]]</code>)         \u2013          <p>See <code>SingleValueType</code> and <code>MultiValueType</code>. Defaults to <code>None</code>.</p> </li> <li> multi             (<code>bool</code>)         \u2013          <p>Whether to allow selection of multiple values. Defaults to <code>True</code>.</p> </li> <li> title             (<code>Optional[str]</code>)         \u2013          <p>Title to be displayed. Defaults to <code>None</code>.</p> </li> <li> actions             (<code>List[Action]</code>)         \u2013          <p>See <code>Action</code>. Defaults to <code>[]</code>.</p> </li> </ul>"},{"location":"pages/API_reference/models/#vizro.models.Filter","title":"Filter","text":"<p>             Bases: <code>VizroBaseModel</code></p> <p>Filter the data supplied to <code>targets</code> on the <code>Page</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; print(repr(Filter(column=\"species\")))\n</code></pre> <p>Parameters:</p> <ul> <li> type             (<code>Literal['filter']</code>)         \u2013          <p>Defaults to <code>\"filter\"</code>.</p> </li> <li> column             (<code>str</code>)         \u2013          <p>Column of <code>DataFrame</code> to filter.</p> </li> <li> targets             (<code>List[str]</code>)         \u2013          <p>Target component to be affected by filter. If none are given then target all components on the page that use <code>column</code>.</p> </li> <li> selector             (<code>Optional[SelectorType]</code>)         \u2013          <p>See SelectorType. Defaults to <code>None</code>.</p> </li> </ul>"},{"location":"pages/API_reference/models/#vizro.models.Graph","title":"Graph","text":"<p>             Bases: <code>VizroBaseModel</code></p> <p>Wrapper for <code>dcc.Graph</code> to visualize charts in dashboard.</p> <p>Parameters:</p> <ul> <li> type             (<code>Literal['graph']</code>)         \u2013          <p>Defaults to <code>\"graph\"</code>.</p> </li> <li> figure             (<code>CapturedCallable</code>)         \u2013          <p>See <code>CapturedCallable</code>.</p> </li> <li> actions             (<code>List[Action]</code>)         \u2013          <p>See <code>Action</code>. Defaults to <code>[]</code>.</p> </li> </ul>"},{"location":"pages/API_reference/models/#vizro.models.Layout","title":"Layout","text":"<pre><code>Layout(**data)\n</code></pre> <p>             Bases: <code>VizroBaseModel</code></p> <p>Grid specification to place chart/components on the <code>Page</code>.</p> <p>Parameters:</p> <ul> <li> grid             (<code>List[List[int]]</code>)         \u2013          <p>Grid specification to arrange components on screen.</p> </li> <li> row_gap             (<code>str</code>)         \u2013          <p>Gap between rows in px. Defaults to <code>\"12px\"</code>.</p> </li> <li> col_gap             (<code>str</code>)         \u2013          <p>Gap between columns in px. Defaults to <code>\"12px\"</code>.</p> </li> <li> row_min_height             (<code>str</code>)         \u2013          <p>Minimum row height in px. Defaults to <code>\"0px\"</code>.</p> </li> <li> col_min_width             (<code>str</code>)         \u2013          <p>Minimum column width in px. Defaults to <code>\"0px\"</code>.</p> </li> </ul>"},{"location":"pages/API_reference/models/#vizro.models.Navigation","title":"Navigation","text":"<p>             Bases: <code>VizroBaseModel</code></p> <p>Navigation in Dashboard to structure Pages.</p> <p>Parameters:</p> <ul> <li> pages             (<code>Optional[NavigationPagesType]</code>)         \u2013          <p>See NavigationPagesType. Defaults to <code>None</code>.</p> </li> </ul>"},{"location":"pages/API_reference/models/#vizro.models.Page","title":"Page","text":"<pre><code>Page(**data)\n</code></pre> <p>             Bases: <code>VizroBaseModel</code></p> <p>A page in <code>Dashboard</code> with its own URL path and place in the <code>Navigation</code>.</p> <p>Parameters:</p> <ul> <li> components             (<code>List[ComponentType]</code>)         \u2013          <p>See ComponentType. At least one component has to be provided.</p> </li> <li> title             (<code>str</code>)         \u2013          <p>Title to be displayed.</p> </li> <li> layout             (<code>Optional[Layout]</code>)         \u2013          <p>Layout to place components in. Defaults to <code>None</code>.</p> </li> <li> controls             (<code>List[ControlType]</code>)         \u2013          <p>See ControlType. Defaults to <code>[]</code>.</p> </li> <li> path             (<code>Optional[str]</code>)         \u2013          <p>Path to navigate to page. Defaults to <code>None</code>.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>If number of page and grid components is not the same</p> </li> </ul>"},{"location":"pages/API_reference/models/#vizro.models.Parameter","title":"Parameter","text":"<p>             Bases: <code>VizroBaseModel</code></p> <p>Alter the arguments supplied to any <code>targets</code> on the <code>Page</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; print(repr(Parameter(\n&gt;&gt;&gt;    targets=[\"scatter.x\"], selector=Slider(min=0, max=1, default=0.8, title=\"Bubble opacity\"))))\n</code></pre> <p>Parameters:</p> <ul> <li> type             (<code>Literal['parameter']</code>)         \u2013          <p>Defaults to <code>\"parameter\"</code>.</p> </li> <li> targets             (<code>List[str]</code>)         \u2013          <p>Targets in the form of <code>&lt;target_component&gt;.&lt;target_argument&gt;</code>.</p> </li> <li> selector             (<code>Optional[SelectorType]</code>)         \u2013          <p>See SelectorType. Defaults to <code>None</code>.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>If targets are invalid and not of the form <code>&lt;target_component&gt;.&lt;target_argument&gt;</code>.</p> </li> </ul>"},{"location":"pages/API_reference/models/#vizro.models.RadioItems","title":"RadioItems","text":"<p>             Bases: <code>VizroBaseModel</code></p> <p>Categorical single-selector <code>RadioItems</code> to be provided to <code>Filter</code>.</p> <p>Parameters:</p> <ul> <li> type             (<code>Literal['radio_items']</code>)         \u2013          <p>Defaults to <code>\"radio_items\"</code>.</p> </li> <li> options             (<code>OptionsType</code>)         \u2013          <p>See <code>OptionsType</code>. Defaults to <code>[]</code>.</p> </li> <li> value             (<code>Optional[SingleValueType]</code>)         \u2013          <p>See <code>SingleValueType</code>. Defaults to <code>None</code>.</p> </li> <li> title             (<code>Optional[str]</code>)         \u2013          <p>Title to be displayed. Defaults to <code>None</code>.</p> </li> <li> actions             (<code>List[Action]</code>)         \u2013          <p>See <code>Action</code>. Defaults to <code>[]</code>.</p> </li> </ul>"},{"location":"pages/API_reference/models/#vizro.models.RangeSlider","title":"RangeSlider","text":"<p>             Bases: <code>VizroBaseModel</code></p> <p>Numeric multi-selector <code>RangeSlider</code>.</p> <p>Can be provided to <code>Filter</code> or <code>Parameter</code>. Based on the underlying <code>dcc.RangeSlider</code>.</p> <p>Parameters:</p> <ul> <li> type             (<code>Literal['range_slider']</code>)         \u2013          <p>Defaults to <code>\"range_slider\"</code>.</p> </li> <li> min             (<code>Optional[float]</code>)         \u2013          <p>Start value for slider. Defaults to <code>None</code>.</p> </li> <li> max             (<code>Optional[float]</code>)         \u2013          <p>End value for slider. Defaults to <code>None</code>.</p> </li> <li> step             (<code>Optional[float]</code>)         \u2013          <p>Step-size for marks on slider. Defaults to <code>None</code>.</p> </li> <li> marks             (<code>Optional[Dict[str, float]]</code>)         \u2013          <p>Marks to be displayed on slider. Defaults to <code>None</code>.</p> </li> <li> value             (<code>Optional[List[float]]</code>)         \u2013          <p>Default start and end value for slider. Must be 2 items. Defaults to <code>None</code>.</p> </li> <li> title             (<code>Optional[str]</code>)         \u2013          <p>Title to be displayed. Defaults to <code>None</code>.</p> </li> <li> actions             (<code>List[Action]</code>)         \u2013          <p>See <code>Action</code>. Defaults to <code>[]</code>.</p> </li> </ul>"},{"location":"pages/API_reference/models/#vizro.models.Slider","title":"Slider","text":"<p>             Bases: <code>VizroBaseModel</code></p> <p>Numeric single-selector <code>Slider</code>.</p> <p>Can be provided to <code>Filter</code> or <code>Parameter</code>. Based on the underlying <code>dcc.Slider</code>.</p> <p>Parameters:</p> <ul> <li> type             (<code>Literal['range_slider']</code>)         \u2013          <p>Defaults to <code>\"range_slider\"</code>.</p> </li> <li> min             (<code>Optional[float]</code>)         \u2013          <p>Start value for slider. Defaults to <code>None</code>.</p> </li> <li> max             (<code>Optional[float]</code>)         \u2013          <p>End value for slider. Defaults to <code>None</code>.</p> </li> <li> step             (<code>Optional[float]</code>)         \u2013          <p>Step-size for marks on slider. Defaults to <code>None</code>.</p> </li> <li> marks             (<code>Optional[Dict[str, float]]</code>)         \u2013          <p>Marks to be displayed on slider. Defaults to <code>None</code>.</p> </li> <li> value             (<code>Optional[float]</code>)         \u2013          <p>Default value for slider. Defaults to <code>None</code>.</p> </li> <li> title             (<code>Optional[str]</code>)         \u2013          <p>Title to be displayed. Defaults to <code>None</code>.</p> </li> <li> actions             (<code>List[Action]</code>)         \u2013          <p>See <code>Action</code>. Defaults to <code>[]</code>.</p> </li> </ul>"},{"location":"pages/API_reference/models/#vizro.models.VizroBaseModel","title":"VizroBaseModel","text":"<pre><code>VizroBaseModel(**data)\n</code></pre> <p>             Bases: <code>BaseModel</code></p> <p>All models that are registered to the model manager should inherit from this class.</p> <p>Parameters:</p> <ul> <li> id             (<code>Optional[str]</code>)         \u2013          <p>ID to identify model. Must be unique throughout the whole dashboard. Defaults to <code>None</code>. When no ID is chosen, ID will be automatically generated.</p> </li> </ul>"},{"location":"pages/API_reference/models/#vizro.models.VizroBaseModel.add_type","title":"add_type  <code>classmethod</code>","text":"<pre><code>add_type(field_name, new_type)\n</code></pre> <p>Adds a new type to an existing field based on a discriminated union.</p> <p>Parameters:</p> <ul> <li> field_name             (<code>str</code>)         \u2013          <p>Field that new type will be added to</p> </li> <li> new_type             (<code>Type[Any]</code>)         \u2013          <p>New type to add to discriminated union</p> </li> </ul>"},{"location":"pages/API_reference/models/#vizro.models.types","title":"vizro.models.types","text":"<p>Types used in pydantic fields.</p>"},{"location":"pages/API_reference/models/#vizro.models.types.ComponentType","title":"ComponentType  <code>module-attribute</code>","text":"<pre><code>ComponentType = Annotated[Union['Button', 'Card', 'Graph'], Field(discriminator='type', description='Component that makes up part of the layout on the page.')]\n</code></pre> <p>Discriminated union. Type of component that makes up part of the layout on the page: <code>Button</code>, <code>Card</code> or <code>Graph</code>.</p>"},{"location":"pages/API_reference/models/#vizro.models.types.ControlType","title":"ControlType  <code>module-attribute</code>","text":"<pre><code>ControlType = Annotated[Union['Filter', 'Parameter'], Field(discriminator='type', description='Control that affects components on the page.')]\n</code></pre> <p>Discriminated union. Type of control that affects components on the page: <code>Filter</code> or <code>Parameter</code>.</p>"},{"location":"pages/API_reference/models/#vizro.models.types.MultiValueType","title":"MultiValueType  <code>module-attribute</code>","text":"<pre><code>MultiValueType = Union[List[StrictBool], List[float], List[str]]\n</code></pre> <p>Permissible value types for multi-value selectors. Values are displayed as default.</p>"},{"location":"pages/API_reference/models/#vizro.models.types.NavigationPagesType","title":"NavigationPagesType  <code>module-attribute</code>","text":"<pre><code>NavigationPagesType = Annotated[Union[List[str], Dict[str, List[str]]], Field(None, description='List of Page IDs or dict mapping of Page IDs and titles (for hierarchical sub-navigation)')]\n</code></pre> <p>Permissible value types for page attribute. Values are displayed as default.</p>"},{"location":"pages/API_reference/models/#vizro.models.types.OptionsType","title":"OptionsType  <code>module-attribute</code>","text":"<pre><code>OptionsType = Union[List[StrictBool], List[float], List[str], List[OptionsDictType]]\n</code></pre> <p>Permissible options types for selectors. Options are available choices for user to select from.</p>"},{"location":"pages/API_reference/models/#vizro.models.types.SelectorType","title":"SelectorType  <code>module-attribute</code>","text":"<pre><code>SelectorType = Annotated[Union['Checklist', 'Dropdown', 'RadioItems', 'RangeSlider', 'Slider'], Field(discriminator='type', description='Selectors to be used inside a control.')]\n</code></pre> <p>Discriminated union. Type of selector to be used inside a control: <code>Checklist</code>, <code>Dropdown</code>, <code>RadioItems</code>, <code>RangeSlider</code> or <code>Slider</code>.</p>"},{"location":"pages/API_reference/models/#vizro.models.types.SingleValueType","title":"SingleValueType  <code>module-attribute</code>","text":"<pre><code>SingleValueType = Union[StrictBool, float, str]\n</code></pre> <p>Permissible value types for single-value selectors. Values are displayed as default.</p>"},{"location":"pages/API_reference/models/#vizro.models.types.CapturedCallable","title":"CapturedCallable","text":"<p>Stores a captured function call to use in a dashboard.</p> <p>Users do not need to instantiate this class directly. Instances are instead generated automatically through the <code>capture</code> decorator. Some of the functionality is similar to <code>functools.partial</code>.</p> <p>Ready-to-use <code>CapturedCallable</code> instances are provided by Vizro. In this case refer to the user guide on Charts/Graph or Actions to see available choices.</p> <p>(Advanced) In case you would like to create your own <code>CapturedCallable</code>, please refer to the user guide on custom charts or custom actions.</p>"},{"location":"pages/API_reference/models/#vizro.models.types.OptionsDictType","title":"OptionsDictType","text":"<p>             Bases: <code>TypedDict</code></p> <p>Permissible sub-type for OptionsType. Needs to be in the format of {\"label\": XXX, \"value\": XXX}.</p>"},{"location":"pages/API_reference/models/#vizro.models.types.capture","title":"capture","text":"<p>Captures a function call to create a <code>CapturedCallable</code>.</p> <p>This is used to add the functionality required to make graphs and actions work in a dashboard. Typically it should be used as a function decorator. There are two possible modes: <code>\"graph\"</code> and <code>\"action\"</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; @capture(\"graph\")\n&gt;&gt;&gt; def plot_function():\n&gt;&gt;&gt;     ...\n&gt;&gt;&gt; @capture(\"action\")\n&gt;&gt;&gt; def action_function():\n&gt;&gt;&gt;     ...\n</code></pre> <p>For further help on the use of <code>@capture(\"graph\")</code>, you can refer to the guide on custom charts.</p>"},{"location":"pages/API_reference/vizro/","title":"Vizro","text":""},{"location":"pages/API_reference/vizro/#vizro","title":"vizro","text":""},{"location":"pages/API_reference/vizro/#vizro.Vizro","title":"Vizro","text":"<pre><code>Vizro()\n</code></pre> <p>The main class of the <code>vizro</code> package.</p>"},{"location":"pages/API_reference/vizro/#vizro.Vizro.build","title":"build","text":"<pre><code>build(dashboard)\n</code></pre> <p>Builds the dashboard.</p> <p>Parameters:</p> <ul> <li> dashboard             (<code>Dashboard</code>)         \u2013          <p><code>Dashboard</code> object.</p> </li> </ul> <p>Returns:</p> <ul> <li> Vizro        \u2013          <p>App object</p> </li> </ul>"},{"location":"pages/API_reference/vizro/#vizro.Vizro.run","title":"run","text":"<pre><code>run(*args, **kwargs)\n</code></pre> <p>Runs the dashboard.</p> <p>Parameters:</p> <ul> <li> args         \u2013          <p>Any args to <code>dash.run_server</code></p> </li> <li> kwargs         \u2013          <p>Any kwargs to <code>dash.run_server</code></p> </li> </ul>"},{"location":"pages/development/authors/","title":"Authors","text":""},{"location":"pages/development/authors/#current-team-members","title":"Current team members","text":"<p>Joseph Perkins, Dan Dumitriu, Antony Milne, Huong Li Nguyen, Maximilian Schulz, Lingyi Zhang, Alexey Snigir, Nadija Graca, Chiara Pullem, Anna Xiong, Petar Pejovic</p>"},{"location":"pages/development/authors/#previous-team-members-and-code-contributors","title":"Previous team members and code contributors","text":"<p>Denis Lebedev, Qiuyi Chen, Elena Fridman, Bo Xu, Jingjing Guo, Oleksandr Serdiuk, Prateek Bajaj, Nikolaos Tsaousis, Annie Wachsmuth, Hamza Oza, Kee Wen Ng, Rashida Kanchwala,</p> <p>with thanks to Sam Bourton and Kevin Staight for sponsorhip, inspiration and guidance,</p> <p>and special thanks to Wesley Leong, Jonas Kemper and team for origination and support</p> <p>(plus everyone else who helped to test, guide, support and encourage development)</p>"},{"location":"pages/development/contributing/","title":"Contributing","text":""},{"location":"pages/development/contributing/#contributing-guidelines","title":"Contributing guidelines","text":"<p>Contributions of all experience levels are welcome! There are many ways to contribute, and we appreciate all of them. We are still defining a detailed process, but for the time being, please use our issues page to discuss any contributions.</p>"},{"location":"pages/development/contributing/#found-a-bug","title":"Found a bug","text":"<p>Great! We would appreciate if you could head to our issues page and raise a ticket in the category <code>bug report</code>. We would appreciate if you searched the existing issues for a similar description before raising a new ticket. We will try to reproduce your reported bug as soon as possible before getting back to you on next steps.</p>"},{"location":"pages/development/contributing/#request-a-feature","title":"Request a feature","text":"<p>Splendid! In order to raise a feature request, please head to our issues page and raise a ticket in the category <code>feature request</code>. We would appreciate if you searched the existing issues for a similar description before raising a new ticket. We will get back to you as soon as possible with an estimate of whether and when this feature could be released.</p>"},{"location":"pages/development/contributing/#how-to-interact-with-the-repository","title":"How to interact with the repository","text":"<p>The easiest way to get up and running quickly is to open the repository in GitHub Codespaces. This will create a temporary development environment with all the necessary configurations, making it especially convenient for tasks like reviewing pull requests.</p> <p>We use Hatch as a project management tool. To get started on your own machine, you should complete the following steps. Note there is no need to set up your own virtual environment since Hatch takes care of that for you.</p> <ol> <li>Install <code>hatch</code> by running <code>brew install hatch</code> or <code>pipx install hatch</code> (preferable to <code>pip install hatch</code>).</li> <li>Clone this repository.</li> <li>Run <code>hatch -v env create</code> from the <code>vizro-core</code> folder of your cloned repository. This creates Hatch's <code>default</code> environment with dependencies installed and the project installed in development mode (i.e. using <code>pip install --editable</code>). It will take a few minutes to complete. All following commands should be executed from this folder as well.</li> <li>Run <code>hatch run example</code> to open an example Vizro dashboard with Dash dev tools enabled.</li> <li>Edit the code to your heart's desire! Thanks to Dash dev tools' hot reloading, any changes to the example app or <code>vizro</code> source code should automatically show in your dashboard without needing refresh or restart any process.</li> </ol> <p>Note</p> <p>The above steps are all automated in GitHub Codespaces thanks to the devcontainer configuration, and the example dashboard should already be running on port <code>8050</code>.</p> <p>If you haven't used Hatch before, it's well worth skimming through their documentation, in particular the page on environments. Run <code>hatch env show</code> to show all of Hatch's environments and available scripts, and take a look at <code>hatch.toml</code> to see our Hatch configuration. It is useful handy to Hatch's tab completion to explore the Hatch CLI.</p>"},{"location":"pages/development/contributing/#examples","title":"Examples","text":"<p>Several example dashboards are given in examples. To run, for instance, the <code>from_dict</code> example, execute:</p> <pre><code>hatch run example from_dict\n</code></pre> <p>If no example is specified (<code>hatch run example</code>) then the default example is used.</p>"},{"location":"pages/development/contributing/#debugging-tips","title":"Debugging tips","text":"<ul> <li>Dash dev tools are enabled in all the Hatch environments by setting environment variable <code>DASH_DEBUG = \"true\"</code>, and so there is no need to specify <code>debug=True</code> when calling <code>Vizro.run</code> to enable them. The reload functionality, callback graph and in-browser error messages are particularly useful.</li> <li>All Hatch environments also have <code>VIZRO_LOG_LEVEL = \"DEBUG\"</code> to show log messages of level <code>DEBUG</code> and above.</li> </ul>"},{"location":"pages/development/contributing/#testing","title":"Testing","text":"<p>Tests are handled using the <code>pytest</code> framework, and test environments are managed by Hatch. To run all tests, run</p> <pre><code>hatch run test\n</code></pre> <p>To run only unit tests, run <code>hatch run test-unit</code> and for integration tests only, run <code>hatch run test-integration</code>. Note that the latter executes all examples in separate testing sessions due to this issue by providing the <code>-k</code> tag per example.</p> <p>Arguments are passed through to the underlying <code>pytest</code> command, e.g.</p> <pre><code>hatch run test -vv\n</code></pre> <p>executes <code>pytest -vv</code> using the Python version in your <code>default</code> environment. To run tests against multiple Python versions, use the <code>all</code> environment by running:</p> <pre><code>hatch run all:test -vv\n</code></pre> <p>To run tests against a particular Python version, specify the particular Hatch environment for that version:</p> <pre><code>hatch run all.py3.10:test -vv\n</code></pre> <p>The script executed by <code>hatch run cov</code> measures test coverage and generates a report.</p>"},{"location":"pages/development/contributing/#schema","title":"Schema","text":"<p>The JSON schema in <code>schemas</code> is generated with <code>hatch run schema</code>. We ensure this is kept up to date with a check in CI.</p>"},{"location":"pages/development/contributing/#pre-commit-hooks-for-linting-etc","title":"Pre-commit hooks (for linting etc.)","text":"<p>All linting and associated dependencies are controlled by pre-commit hooks and specified in .pre-commit-config.yaml. Configuration for tools is additionally given in <code>pyproject.toml</code>, e.g.</p> <pre><code>[tool.black]\ntarget-version = [\"py37\"]\nline-length = 120\n</code></pre> <p>Linting checks are enforced in CI. To run pre-commit hooks locally, there are two options:</p> <ol> <li>Run <code>hatch run pre-commit install</code> to automatically run the hooks on every commit (you can always skip the checks with <code>git commit --no-verify</code>). In case this fails due to <code>gitleaks</code>, please read below for an explanation and how to install <code>go</code>.</li> <li>Run <code>hatch run lint</code> to run <code>pre-commit</code> hooks on all files. (You can run eg <code>hatch run lint mypy</code> to only run specific linters, here mypy.)</li> </ol> <p>Note that Hatch's <code>default</code> environment specifies <code>pre-commit</code> as a dependency but otherwise does not specify dependencies for linting tools such as <code>black</code>. These are controlled by .pre-commit-config.yaml and can be updated when required with <code>pre-commit autoupdate</code>.</p>"},{"location":"pages/development/contributing/#secret-scans","title":"Secret scans","text":"<p>We use gitleaks for secret scanning. We do this via <code>pre-commit</code>, however there are a few things to note:</p> <ol> <li>Using <code>gitleaks</code> may require an installation of <code>go</code> on the developer machine. This is easy and explained here.</li> <li>For that reason <code>hatch run lint</code> skips the secret scans, to function on all machines.</li> <li>To run a secret-scan, simply run <code>hatch run secrets</code>.</li> <li>Secret scans will run on CI, but it is highly recommended to check for secrets before pushing to the remote repository and ideally also before even committing.</li> </ol> <p>When executing the secret scan, there are two modes: <code>protect</code> can discover secrets in staged files, <code>detect</code> does so in the commit history.</p>"},{"location":"pages/development/contributing/#snyk-and-requirementstxt","title":"Snyk and <code>requirements.txt</code>","text":"<p>Snyk is used to scan for vulnerabilities in dependencies. This is done by scanning the <code>requirements.txt</code> file. As Hatch manages the dependencies by <code>pyproject.toml</code>, we need to convert the dependencies to <code>requirements.txt</code> before Snyk can scan them. This is done by running <code>hatch run update-snyk-requirements</code>. The outputs are written to <code>snyk/requirements.txt</code>, which can be used by Snyk to scan for vulnerabilities.</p> <p>We also validate whether the dependencies in <code>requirements.txt</code> are up-to-date. This is done in CI.</p> <p>Note that <code>requirements.txt</code> is not used by Hatch, and so it should not be edited manually for dependency management. Instead, edit <code>pyproject.toml</code> or <code>hatch.toml</code> when adding or removing dependencies.</p>"},{"location":"pages/development/contributing/#changelog","title":"Changelog","text":"<p>Vizro uses scriv to build and maintain a meaningful <code>CHANGELOG.md</code>. When creating a PR, the developer needs to ensure that a changelog fragment has been created in the folder <code>changelog.d</code>. This fragment is a small <code>.md</code> file describing the changes of the current PR that should be mentioned in the <code>CHANGELOG.md</code> entry of the next release.</p> <p>You can easily create such a fragment by running</p> <pre><code>hatch run docs:changelog\n</code></pre> <p>and then uncommenting the relevant section(s) you want to describe. In case your PR does not contain <code>CHANGELOG.md</code> relevant changes, leave everything commented out.</p>"},{"location":"pages/development/contributing/#releases","title":"Releases","text":"<p>Vizro's version is given by <code>__version__</code> in <code>src/vizro/__init__.py</code>. To bump the version, run, e.g. <code>hatch version minor</code>. See Hatch's documentation for more details.</p> <p>To build the source distribution and wheel, run <code>hatch build</code>.</p>"},{"location":"pages/development/contributing/#code-of-conduct","title":"Code of conduct","text":"<p>The Vizro team pledges to foster and maintain a friendly community. We enforce a Code of Conduct to ensure every Vizro contributor is welcomed and treated with respect.</p>"},{"location":"pages/development/contributing/#faq","title":"FAQ","text":""},{"location":"pages/development/contributing/#how-do-i-add-a-dependency","title":"How do I add a dependency?","text":"<p>Add it to the list of <code>dependencies</code> in <code>hatch.toml</code> (if you are adding a dependency for development) or in <code>pyproject.toml</code> (if you are adding a dependency for the actual package). The next time the <code>default</code> environment is used (e.g. with <code>hatch shell</code>), the dependency will be automatically installed.</p>"},{"location":"pages/development/contributing/#what-about-a-lock-file","title":"What about a lock file?","text":"<p>We do not have and should not need a dependency lock file (see this Hatch FAQ). If one is for some reason eventually required, good options would be pip-tools, <code>hatch-pip-deepfreeze</code> or just <code>pip freeze</code>.</p>"},{"location":"pages/development/contributing/#how-do-i-find-the-path-to-the-python-executable-used","title":"How do I find the path to the Python executable used?","text":"<p><code>hatch run pypath</code> displays the path to the Python executable used in the <code>default</code> environment. This is useful e.g. for setting up a run configuration in PyCharm.</p>"},{"location":"pages/development/contributing/#why-are-we-using-a-line-length-of-120-characters","title":"Why are we using a line length of 120 characters?","text":"<p>This is the default value set in the Hatch template, and it feels sensible in the era of big screens. Line lengths can be discussed endlessly but ultimately this number should be agreed on by the Vizro team. See also this article.</p>"},{"location":"pages/development/contributing/#further-reading-and-credits","title":"Further reading and credits","text":"<p>Our toolchain and repo structure is influenced by the following templates:</p> <ul> <li><code>hatch new</code> template</li> <li><code>copier-pylib</code></li> <li><code>cookiecutter-hypermodern-python</code> and associated user guide</li> <li><code>scikit-hep/cookie</code> and associated developer guidelines</li> </ul> <p>Further useful articles:</p> <ul> <li>The basics of Python packaging in early 2023</li> </ul> <p>Special thanks to Juan Luis Cano Rodr\u00edguez for useful discussions.</p>"},{"location":"pages/tutorials/explore_components/","title":"Get started with your first dashboard","text":"<p>This tutorial guides you step-by-step through the process of creating a dashboard.</p> <p>By the end of this tutorial, you will have gained a deep understanding of Vizro dashboards: their structure, adding functionality, and configuring layouts to suit your specific needs.</p> <p>This step-by-step guide is designed to equip you with the knowledge and skills required to create your own dashboards using Vizro.</p> <p>In case you are completely new, you may want to review our Get started tutorial first.</p>"},{"location":"pages/tutorials/explore_components/#lets-get-started","title":"Let's get started!","text":""},{"location":"pages/tutorials/explore_components/#1-install-vizro-and-get-ready-to-run-your-code","title":"1. Install Vizro and get ready to run your code","text":"<p>In order to get started with this tutorial, you should have Vizro installed, and be ready to evaluate your code, either by pasting it into a Jupyter notebook cell, or by running it from a python script.</p>"},{"location":"pages/tutorials/explore_components/#2-create-first-dashboard-page","title":"2. Create first dashboard page","text":"<p>At the core of every dashboard is a <code>Page</code> object, which serves as its foundation. Think of it as a blank canvas where you can arrange and customize elements like charts and text.</p> <p>In this first section, you will explore how to create a page with different elements and delve into the layout configuration.</p>"},{"location":"pages/tutorials/explore_components/#21-add-first-component","title":"2.1. Add first component","text":"<p>First, let's define the structure of your dashboard page. Create a new <code>Page</code> called <code>first_page</code> and assign a title. Each <code>Page</code> allows you to define a list of <code>components</code>. These <code>components</code> are responsible for the content displayed on the page and can include a wide range of elements such as charts, text boxes, buttons, and more.</p> <p>Let's begin by adding a box plot showing the life expectancy per continent to the page. This can be done by including a <code>Graph</code> in the <code>components</code> list and assigning it a unique id. <code>Graphs</code> are utilized to incorporate charts to your page by specifying <code>figure</code> using the plotly express standard.</p> <p>First component</p> app.pyResult <pre><code>from vizro import Vizro\nimport vizro.models as vm\nimport vizro.plotly.express as px\ndf = px.data.gapminder()\ngapminder_data = (\ndf.groupby(by=[\"continent\", \"year\"]).\nagg({\"lifeExp\": \"mean\", \"pop\": \"sum\", \"gdpPercap\": \"mean\"}).reset_index()\n)\nfirst_page = vm.Page(\ntitle=\"First Page\",\ncomponents=[\nvm.Graph(\nid=\"box_cont\",\nfigure=px.box(gapminder_data, x=\"continent\", y=\"lifeExp\", color=\"continent\",\nlabels={\"lifeExp\": \"Life Expectancy\", \"continent\":\"Continent\"}),\n),\n],\n)\ndashboard = vm.Dashboard(pages=[first_page])\nVizro().build(dashboard).run()\n</code></pre> <p></p> <p>Let's give it a try and see your dashboard in action! Either paste the above code into a Jupyter notebook cell and evaluate it, or create a new Python script called <code>app.py</code> and copy the code from above into the script. Next, navigate to the directory where the <code>app.py</code> file is located using your terminal or command prompt. Run the script by executing the command:</p> <pre><code>python app.py\n</code></pre> <p>Once the script is running, open your web browser and go to <code>localhost:8050</code>. You should now see your dashboard page with the gapminder data displayed.</p> <p>If everything worked correctly, you should be able to see your first dashboard page as shown in the <code>Result</code> tab above. Congratulations on creating your very first dashboard page!</p> <p>You may notice a couple of additions in the <code>app.py</code> script:</p> <ol> <li> <p>The import statement <code>import vizro.plotly.express as px</code> allows the use of plotly express and facilitates seamless integration into Vizro by defining figures with px.</p> </li> <li> <p>The <code>first_page</code> is added to the <code>Dashboard</code> before building and running it with <code>Vizro().build(dashboard).run()</code>. It's important to note that every <code>Page</code> that you want to display needs to be added to the <code>Dashboard</code> object.</p> </li> </ol>"},{"location":"pages/tutorials/explore_components/#22-add-further-components","title":"2.2. Add further components","text":"<p>To further enhance your first dashboard page, let's add a <code>Card</code> and another chart using <code>Graph</code> to the <code>components</code> list. The <code>Card</code> allows you to insert text into your dashboard and can be configured using markdown syntax. For the second chart, we will incorporate a bar chart that visualizes the GDP development per continent since 1952.</p> <p>Remember, you can combine and arrange various types of <code>components</code> on a dashboard page. For more in-depth information on using and configuring different <code>components</code>, refer to the user guide for components. It serves as a detailed resource to learn about the wide range of <code>components</code> available and how to make the most of them in your dashboards.</p> Further information for <code>components</code> <p>Currently available types of <code>components</code>:</p> <ul> <li><code>Card</code></li> <li><code>Graph</code></li> <li><code>Button</code></li> </ul> <p>Add components</p> Code first componentCode second componentapp.pyResult <pre><code>vm.Card(\ntext=\"\"\"\n        # First dashboard page\n        This pages shows the inclusion of markdown text in a page and how components\n        can be structured using Layout.\n    \"\"\",\n)\n</code></pre> <pre><code>vm.Graph(\nid=\"bar_gdp\",\nfigure=px.bar(gapminder_data, x=\"year\", y=\"gdpPercap\", color=\"continent\",\nlabels={\"year\": \"Year\", \"continent\": \"Continent\",\n\"gdpPercap\":\"GDP Per Cap\"}),\n)\n</code></pre> <pre><code>from vizro import Vizro\nimport vizro.models as vm\nimport vizro.plotly.express as px\ndf = px.data.gapminder()\ngapminder_data = (\ndf.groupby(by=[\"continent\", \"year\"]).\nagg({\"lifeExp\": \"mean\", \"pop\": \"sum\", \"gdpPercap\": \"mean\"}).reset_index()\n)\nfirst_page = vm.Page(\ntitle=\"First Page\",\ncomponents=[\nvm.Card(\ntext=\"\"\"\n                # First dashboard page\n                This pages shows the inclusion of markdown text in a page and how components\n                can be structured using Layout.\n            \"\"\",\n),\nvm.Graph(\nid=\"box_cont\",\nfigure=px.box(gapminder_data, x=\"continent\", y=\"lifeExp\", color=\"continent\",\nlabels={\"lifeExp\": \"Life Expectancy\", \"continent\":\"Continent\"}),\n),\nvm.Graph(\nid=\"bar_gdp\",\nfigure=px.bar(gapminder_data, x=\"year\", y=\"gdpPercap\", color=\"continent\",\nlabels={\"year\": \"Year\", \"continent\": \"Continent\",\n\"gdpPercap\":\"GDP Per Cap\"}),\n),\n],\n)\ndashboard = vm.Dashboard(pages=[first_page])\nVizro().build(dashboard).run()\n</code></pre> <p></p> <p>Let's run the code and take a look at our dashboard.</p> <p>If using a Jupyter notebook...</p> <p>If you are following this tutorial using a Jupyter notebook, we recommend restarting the kernel before re-evaluating your notebook. This avoids error messages about components already existing in the <code>model_manager</code>.</p> <p>As you explore the added <code>components</code>, you may notice that the current layout could be further enhanced. The charts may appear cramped, while the text component has ample unused space. In the next section, we will learn how to configure the layout and effectively arrange the <code>components</code>.</p>"},{"location":"pages/tutorials/explore_components/#23-configure-layout","title":"2.3. Configure layout","text":"<p>To configure the appearance for your <code>Page</code>, the <code>Layout</code> object is utilized. It allows you to specify the placement and size of <code>components</code> on the grid. By default, each element is placed in the order they are added to the <code>components</code> list with equal space, as observed in the previous section.</p> <p>To improve the current layout, we aim to optimize the space by positioning the text at the top and the two charts side by side while giving the charts more space relative to the text component. This can be achieved using the following configuration: <code>grid=[[0, 0], [1, 2], [1, 2], [1, 2]]</code>.</p> <p>Let's go through one-by-one. Firstly, the configuration divides the available space into two columns and four rows. Each element in the list represents one row of the grid layout. An example of the generated grid is shown in below.</p> <p></p> <p>Secondly, the <code>components</code> are placed on the grid as visualized with the white frames. The text card, referenced by 0 as the first element in the <code>components</code> list, is placed in the first row and spans across both columns (<code>[0, 0]</code>). The two charts, referenced by 1 and 2, are positioned next to each other and span across two columns (<code>[1, 2]</code>).</p> <p></p> <p>It's important to note that the charts span over three rows, denoted by <code>[1, 2], [1, 2], [1, 2]</code>, while the text card only occupies one row <code>[0, 0]</code>. As a result, the charts occupy three-quarters of the vertical space, while the text card occupies one-quarter of it.</p> <p></p> <p>Let's see how it is looks on the dashboard when applied to the three components. If you like to learn more about how to configure layouts, check out the user guide</p> <p>Configure layout</p> Codeapp.pyResult <pre><code>layout=vm.Layout(grid=[[0, 0], [1, 2], [1, 2], [1, 2]])\n</code></pre> <pre><code>from vizro import Vizro\nimport vizro.models as vm\nimport vizro.plotly.express as px\ndf = px.data.gapminder()\ngapminder_data = (\ndf.groupby(by=[\"continent\", \"year\"]).\nagg({\"lifeExp\": \"mean\", \"pop\": \"sum\", \"gdpPercap\": \"mean\"}).reset_index()\n)\nfirst_page = vm.Page(\ntitle=\"First Page\",\nlayout=vm.Layout(grid=[[0, 0], [1, 2], [1, 2], [1, 2]]),\ncomponents=[\nvm.Card(\ntext=\"\"\"\n                # First dashboard page\n                This pages shows the inclusion of markdown text in a page and how components\n                can be structured using Layout.\n            \"\"\",\n),\nvm.Graph(\nid=\"box_cont\",\nfigure=px.box(gapminder_data, x=\"continent\", y=\"lifeExp\", color=\"continent\",\nlabels={\"lifeExp\": \"Life Expectancy\", \"continent\":\"Continent\"}),\n),\nvm.Graph(\nid=\"bar_gdp\",\nfigure=px.bar(gapminder_data, x=\"year\", y=\"gdpPercap\", color=\"continent\",\nlabels={\"year\": \"Year\", \"continent\": \"Continent\",\n\"gdpPercap\":\"GDP Per Cap\"}),\n),\n],\n)\ndashboard = vm.Dashboard(pages=[first_page])\nVizro().build(dashboard).run()\n</code></pre> <p></p>"},{"location":"pages/tutorials/explore_components/#24-configure-filter","title":"2.4. Configure filter","text":"<p>The next thing you will learn is how to add functionality to your first dashboard page. This is achieved by adding <code>controls</code> to the <code>Page</code>. <code>Controls</code> enable interaction with the <code>components</code> and empower users with functionality. In general, <code>controls</code> can be of two types. The first one are <code>Filters</code>, which allows users to filter a column of the underlying data. The second type is <code>Parameters</code>, which enables users to modify arguments or properties of the <code>components</code> themselves, such as adjusting colors.</p> <p>By incorporating <code>controls</code> into your dashboard, you enhance its interactivity and make it more dynamic, enabling users to have greater control and customization over the displayed data and components.</p> Further information for <code>controls</code> <p>The user guide for Controls provides a comprehensive overview on how to apply <code>Filters</code> and <code>Parameters</code>.</p> <p>In order to link the <code>controls</code> to your two charts, it's important to understand the unique id assigned to each <code>component</code>. This id is unique across all dashboard pages and serves as a reference for targeting specific <code>components</code>.</p> <p>For your first dashboard page, a <code>Filter</code> is added to enable filtering on specific continents of the underlying data. The <code>Filter</code> requires the <code>column</code> argument, that denotes the target column to be filtered. Each <code>control</code> also has a <code>targets</code> parameter, which allows you to specify the datasets and components that will be affected by the <code>control</code>. In the case of your first dashboard page, both charts are listed in the <code>targets</code> parameter, meaning that the filter will be applied to both charts. However, you also have the flexibility to apply the <code>Filter</code> to only one specific chart if desired.</p> <p>Configure filter</p> Codeapp.pyResult <pre><code>controls=[\nvm.Filter(column=\"continent\", targets=[\"box_cont\", \"bar_gdp\"]),\n]\n</code></pre> <pre><code>from vizro import Vizro\nimport vizro.models as vm\nimport vizro.plotly.express as px\ndf = px.data.gapminder()\ngapminder_data = (\ndf.groupby(by=[\"continent\", \"year\"]).\nagg({\"lifeExp\": \"mean\", \"pop\": \"sum\", \"gdpPercap\": \"mean\"}).reset_index()\n)\nfirst_page = vm.Page(\ntitle=\"First Page\",\nlayout=vm.Layout(grid=[[0, 0], [1, 2], [1, 2], [1, 2]]),\ncomponents=[\nvm.Card(\ntext=\"\"\"\n                # First dashboard page\n                This pages shows the inclusion of markdown text in a page and how components\n                can be structured using Layout.\n            \"\"\",\n),\nvm.Graph(\nid=\"box_cont\",\nfigure=px.box(gapminder_data, x=\"continent\", y=\"lifeExp\", color=\"continent\",\nlabels={\"lifeExp\": \"Life Expectancy\", \"continent\":\"Continent\"}),\n),\nvm.Graph(\nid=\"bar_gdp\",\nfigure=px.bar(gapminder_data, x=\"year\", y=\"gdpPercap\", color=\"continent\",\nlabels={\"year\": \"Year\", \"continent\": \"Continent\",\n\"gdpPercap\":\"GDP Per Cap\"}),\n),\n],\ncontrols=[\nvm.Filter(column=\"continent\", targets=[\"box_cont\", \"bar_gdp\"]),\n],\n)\ndashboard = vm.Dashboard(pages=[first_page])\nVizro().build(dashboard).run()\n</code></pre> <p></p> <p>Fantastic job! By completing your first dashboard page, you have gained valuable skills in creating a <code>Page</code> with multiple <code>components</code>, arranging them using layout  configuration, and adding functionality to your dashboard.</p>"},{"location":"pages/tutorials/explore_components/#3-create-second-dashboard-page","title":"3. Create second dashboard page","text":"<p>Moving forward, you will add your second dashboard page to delve deeper into <code>controls</code> and explore different types of <code>selectors</code>. The structure is similar to the page you just created, and you configure two charts to visualize the iris data set.</p>"},{"location":"pages/tutorials/explore_components/#31-configure-parameter","title":"3.1. Configure parameter","text":"<p>Next, you add two <code>Parameters</code> to the <code>controls</code>. The first parameter will allow for changing the color of the virginica data, targeting both charts. The second parameter will adjust the opacity of the first chart. Unlike <code>Filters</code> where you are required to set the <code>column</code>, <code>Parameters</code> require you to define the <code>targets</code>.</p> <p>For instance, the opacity of the scatter chart can be changed by defining <code>scatter_iris.opacity</code> in the <code>targets</code>. In general, <code>targets</code> for <code>Parameters</code> are set following the structure of <code>component_id.argument</code>. In certain cases, you may encounter a nested structure for the <code>targets</code>. An example of this is <code>scatter_iris.color_discrete_map.virginica</code>.  This nested structure allows you to target a specific attribute within a component. In this particular example, it specifies that only the color of the virginica flower type should be changed. More information on how to set <code>targets</code> for <code>Parameters</code> can be found in the user guide for controls.</p> <p>Second page</p> Codeapp.pyResult <pre><code>iris_data = px.data.iris()\nsecond_page = vm.Page(\ntitle=\"Second Page\",\ncomponents=[\nvm.Graph(\nid=\"scatter_iris\",\nfigure=px.scatter(iris_data, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\ncolor_discrete_map={\"setosa\": \"#00b4ff\", \"versicolor\": \"#ff9222\"},\nlabels={\"sepal_width\": \"Sepal Width\", \"sepal_length\": \"Sepal Length\",\n\"species\": \"Species\"},\n),\n),\nvm.Graph(\nid=\"bar_iris\",\nfigure=px.bar(iris_data, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\ncolor_discrete_map={\"setosa\": \"#00b4ff\", \"versicolor\": \"#ff9222\"},\nlabels={\"sepal_width\": \"Sepal Width\", \"sepal_length\": \"Sepal Length\",\n\"species\": \"Species\"},\n),\n),\n],\ncontrols=[\nvm.Parameter(\ntargets=[\"scatter_iris.color_discrete_map.virginica\",\n\"bar_iris.color_discrete_map.virginica\"],\nselector=vm.Dropdown(\noptions=[\"#ff5267\", \"#3949ab\"], multi=False, value=\"#3949ab\", title=\"Color Virginica\"),\n),\nvm.Parameter(\ntargets=[\"scatter_iris.opacity\"],\nselector=vm.Slider(min=0, max=1, value=0.8, title=\"Opacity\"),\n),\n],\n)\n</code></pre> <pre><code>from vizro import Vizro\nimport vizro.models as vm\nimport vizro.plotly.express as px\ndf = px.data.gapminder()\ngapminder_data = (\ndf.groupby(by=[\"continent\", \"year\"]).\nagg({\"lifeExp\": \"mean\", \"pop\": \"sum\", \"gdpPercap\": \"mean\"}).reset_index()\n)\nfirst_page = vm.Page(\ntitle=\"First Page\",\nlayout=vm.Layout(grid=[[0, 0], [1, 2], [1, 2], [1, 2]]),\ncomponents=[\nvm.Card(\ntext=\"\"\"\n                # First dashboard page\n                This pages shows the inclusion of markdown text in a page and how components\n                can be structured using Layout.\n            \"\"\",\n),\nvm.Graph(\nid=\"box_cont\",\nfigure=px.box(gapminder_data, x=\"continent\", y=\"lifeExp\", color=\"continent\",\nlabels={\"lifeExp\": \"Life Expectancy\", \"continent\":\"Continent\"}),\n),\nvm.Graph(\nid=\"bar_gdp\",\nfigure=px.bar(gapminder_data, x=\"year\", y=\"gdpPercap\", color=\"continent\",\nlabels={\"year\": \"Year\", \"continent\": \"Continent\",\n\"gdpPercap\":\"GDP Per Cap\"}),\n),\n],\ncontrols=[\nvm.Filter(column=\"continent\", targets=[\"box_cont\", \"bar_gdp\"]),\n],\n)\niris_data = px.data.iris()\nsecond_page = vm.Page(\ntitle=\"Second Page\",\ncomponents=[\nvm.Graph(\nid=\"scatter_iris\",\nfigure=px.scatter(iris_data, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\ncolor_discrete_map={\"setosa\": \"#00b4ff\", \"versicolor\": \"#ff9222\"},\nlabels={\"sepal_width\": \"Sepal Width\", \"sepal_length\": \"Sepal Length\",\n\"species\": \"Species\"},\n),\n),\nvm.Graph(\nid=\"bar_iris\",\nfigure=px.bar(iris_data, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\ncolor_discrete_map={\"setosa\": \"#00b4ff\", \"versicolor\": \"#ff9222\"},\nlabels={\"sepal_width\": \"Sepal Width\", \"sepal_length\": \"Sepal Length\",\n\"species\": \"Species\"},\n),\n),\n],\ncontrols=[\nvm.Parameter(\ntargets=[\"scatter_iris.color_discrete_map.virginica\",\n\"bar_iris.color_discrete_map.virginica\"],\nselector=vm.Dropdown(\noptions=[\"#ff5267\", \"#3949ab\"], multi=False, value=\"#3949ab\", title=\"Color Virginica\"),\n),\nvm.Parameter(\ntargets=[\"scatter_iris.opacity\"],\nselector=vm.Slider(min=0, max=1, value=0.8, title=\"Opacity\"),\n),\n],\n)\ndashboard = vm.Dashboard(pages=[first_page,second_page])\nVizro().build(dashboard).run()\n</code></pre> <p></p>"},{"location":"pages/tutorials/explore_components/#32-customize-with-selectors","title":"3.2. Customize with selectors","text":"<p>When examining the code, you will notice the usage of two different types of <code>selectors</code>, namely <code>Dropdown</code> and <code>Slider</code>, within the <code>Parameters</code>. These <code>selectors</code> provide additional configuration options for the <code>controls</code> and allow you to customize their behavior and appearance.</p> <p>The first parameter of your page is a <code>Dropdown</code>. It is configured with two available options, disables multi-selection and has a default <code>value</code> set to blue. This means users can choose a single option from the dropdown. The second parameter is a <code>Slider</code> with a default value of 0.8. It allows users to adjust a value within the specified range of <code>min=0</code> and <code>max=1</code>. As you can see, <code>selectors</code> offer flexibility in configuring the controls and are applicable to both <code>Filters</code> and <code>Parameters</code>. They allow you to fine-tune the behavior and appearance of the controls to suit your specific needs.</p> Further information for <code>selectors</code> <p>Currently available <code>selectors</code> for <code>Filter</code> and <code>Parameter</code>:</p> <ul> <li><code>Checklist</code></li> <li><code>Dropdown</code></li> <li><code>RadioItems</code></li> <li><code>RangeSlider</code></li> <li><code>Slider</code></li> </ul>"},{"location":"pages/tutorials/explore_components/#4-create-final-dashboard","title":"4. Create final dashboard","text":"<p>Finally, it's time to put everything together and create a cohesive dashboard. In this section, we will focus on creating a homepage for your dashboard and provide seamless navigation to the previously built pages.</p> <p>To enable easy navigation within your dashboard, we will create the homepage that serves as the entry point for the user. For that, we will utilize two <code>Cards</code> and include them in the <code>components</code> list. Each <code>Card</code> serves as a customizable tile that can be configured with a title, text, and an image. These cards will act as links to the subpages within your dashboard.</p> <p>To bring everything together, you will now reference the two subpages within the <code>Cards</code> on the homepage by specifying their respective <code>href</code> attributes as <code>href=\"/first-page\"</code> and <code>href=\"/second-page\"</code>. This establishes the navigation links from the homepage to each of the subpages.</p> <p>Furthermore, the created pages need to be added to the dashboard using the following line of code: <code>vm.Dashboard(pages=[home_page, first_page, second_page])</code>. This ensures that all the pages are accessible in the dashboard.</p> <p>Once everything is put together, you will have a functional dashboard where you can navigate from the homepage to each of the subpages. Additionally, you can use the navigation panel on the left side to switch between the three pages, providing a seamless and interactive user experience.</p> <p>Final dashboard</p> Codeapp.pyHomepageSubpage1Subpage2 <p><pre><code>home_page = vm.Page(\ntitle=\"Homepage\",\ncomponents=[\nvm.Card(\ntext=\"\"\"\n            ![](assets/images/icons/content/collections.svg#icon-top)\n            ### First Page\n            Exemplary first dashboard page.\n            \"\"\",\nhref=\"/first-page\",\n),\nvm.Card(\ntext=\"\"\"\n            ![](assets/images/icons/content/features.svg#icon-top)\n            ### Second Page\n            Exemplary second dashboard page.\n            \"\"\",\nhref=\"/second-page\",\n),\n],\n)\n</code></pre> <pre><code>dashboard = vm.Dashboard(pages=[home_page, first_page, second_page])\n</code></pre></p> <pre><code>from vizro import Vizro\nimport vizro.models as vm\nimport vizro.plotly.express as px\nhome_page = vm.Page(\ntitle=\"Homepage\",\ncomponents=[\nvm.Card(\ntext=\"\"\"\n            ![](assets/images/icons/content/collections.svg#icon-top)\n            ### First Page\n            Exemplary first dashboard page.\n            \"\"\",\nhref=\"/first-page\",\n),\nvm.Card(\ntext=\"\"\"\n            ![](assets/images/icons/content/features.svg#icon-top)\n            ### Second Page\n            Exemplary second dashboard page.\n            \"\"\",\nhref=\"/second-page\",\n),\n],\n)\ndf = px.data.gapminder()\ngapminder_data = (\ndf.groupby(by=[\"continent\", \"year\"]).\nagg({\"lifeExp\": \"mean\", \"pop\": \"sum\", \"gdpPercap\": \"mean\"}).reset_index()\n)\nfirst_page = vm.Page(\ntitle=\"First Page\",\nlayout=vm.Layout(grid=[[0, 0], [1, 2], [1, 2], [1, 2]]),\ncomponents=[\nvm.Card(\ntext=\"\"\"\n                # First dashboard page\n                This pages shows the inclusion of markdown text in a page and how components\n                can be structured using Layout.\n            \"\"\",\n),\nvm.Graph(\nid=\"box_cont\",\nfigure=px.box(gapminder_data, x=\"continent\", y=\"lifeExp\", color=\"continent\",\nlabels={\"lifeExp\": \"Life Expectancy\", \"continent\":\"Continent\"}),\n),\nvm.Graph(\nid=\"bar_gdp\",\nfigure=px.bar(gapminder_data, x=\"year\", y=\"gdpPercap\", color=\"continent\",\nlabels={\"year\": \"Year\", \"continent\": \"Continent\",\n\"gdpPercap\":\"GDP Per Cap\"}),\n),\n],\ncontrols=[\nvm.Filter(column=\"continent\", targets=[\"box_cont\", \"bar_gdp\"]),\n],\n)\niris_data = px.data.iris()\nsecond_page = vm.Page(\ntitle=\"Second Page\",\ncomponents=[\nvm.Graph(\nid=\"scatter_iris\",\nfigure=px.scatter(iris_data, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\ncolor_discrete_map={\"setosa\": \"#00b4ff\", \"versicolor\": \"#ff9222\"},\nlabels={\"sepal_width\": \"Sepal Width\", \"sepal_length\": \"Sepal Length\",\n\"species\": \"Species\"},\n),\n),\nvm.Graph(\nid=\"bar_iris\",\nfigure=px.bar(iris_data, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\ncolor_discrete_map={\"setosa\": \"#00b4ff\", \"versicolor\": \"#ff9222\"},\nlabels={\"sepal_width\": \"Sepal Width\", \"sepal_length\": \"Sepal Length\",\n\"species\": \"Species\"},\n),\n),\n],\ncontrols=[\nvm.Parameter(\ntargets=[\"scatter_iris.color_discrete_map.virginica\",\n\"bar_iris.color_discrete_map.virginica\"],\nselector=vm.Dropdown(\noptions=[\"#ff5267\", \"#3949ab\"], multi=False, value=\"#3949ab\", title=\"Color Virginica\"),\n),\nvm.Parameter(\ntargets=[\"scatter_iris.opacity\"],\nselector=vm.Slider(min=0, max=1, value=0.8, title=\"Opacity\"),\n),\n],\n)\ndashboard = vm.Dashboard(pages=[home_page, first_page, second_page])\nVizro().build(dashboard).run()\n</code></pre> <p></p> <p></p> <p></p> <p>Congratulations on completing this tutorial! You have acquired skills in configuring layouts, adding components, and implementing functionality in Vizro dashboards. By building your own dashboard with multiple pages, you have gained hands-on experience in creating dynamic and interactive data visualizations.</p>"},{"location":"pages/tutorials/explore_components/#further-reference","title":"Further reference","text":"<p>After completing the tutorial you now have a solid understanding of the main elements required to build dashboard pages and how to bring them together.</p> <p>For future dashboard creations, you can explore more about the available dashboard <code>components</code> by going through the user guide. To gain more in-depth knowledge about the usage and configuration details of <code>controls</code>, check out the user guide dedicated to Controls. This guide will provide you with valuable insights on utilizing and customizing controls for interactive functionality in your dashboards.</p> <p>Vizro doesn't end here, and we only covered the key features, but there is still much more to explore! You can learn:</p> <ul> <li>How to create you own components under custom components</li> <li>How to add custom styling using custom css</li> <li>How to use Actions for e.g. chart interaction or custom controls</li> <li>How to create dashboards from <code>yaml</code>, <code>dict</code> or <code>json</code> following the user guide</li> </ul>"},{"location":"pages/tutorials/first_dashboard/","title":"Get started with Vizro","text":"<p>This tutorial introduces Vizro. It is a step-by-step guide to create a first dashboard and is designed to equip you with the knowledge to explore the documentation further.</p> <p>If you want a more complete tutorial exploring more of the available features, please see the Explore Vizro tutorial.</p>"},{"location":"pages/tutorials/first_dashboard/#lets-get-started","title":"Let's get started!","text":""},{"location":"pages/tutorials/first_dashboard/#1-install-vizro-and-its-dependencies","title":"1. Install Vizro and its dependencies","text":"<p>If you haven't already installed Vizro, follow the installation guide to do so inside a virtual environment.</p> <p>If you consider yourself a beginner to python and/or virtual environments, there is also a section that avoids any use of terminals and relies only upon a graphical user interface.</p>"},{"location":"pages/tutorials/first_dashboard/#2-open-a-jupyter-notebook","title":"2. Open a Jupyter notebook","text":"<p>A good way to initially explore Vizro is from inside a Jupyter notebook. If you haven't used one of these before, you may need to install the Jupyter package:</p> <pre><code>pip install jupyter\n</code></pre> <p>From the terminal window, with the virtual environment you installed Vizro in active, start a new notebook as follows:</p> <pre><code>jupyter notebook\n</code></pre> <p>The command opens a browser tab and you can navigate to your preferred folder for this new project. Create a new notebook <code>Python 3 (ipykernel)</code> notebook from the \"New\" dropdown.</p> Beginners/Code novices <p>If you followed the beginners steps in the the installation guide, you should already be set, and you can continue below.</p> <p>Confirm that Vizro is installed by typing the following into a cell in the notebook and running it.</p> <pre><code>import vizro\nprint(vizro.__version__)\n</code></pre> <p>You should see a return output of the form <code>0.1.0</code>.</p>"},{"location":"pages/tutorials/first_dashboard/#3-create-your-first-dashboard","title":"3. Create your first dashboard","text":"<p>You can now paste the below example into a jupyter notebook cell (or a python script), run it, and see the results.</p> <p>Dashboard Configuration Syntaxes</p> Code for the cellResult <pre><code>import vizro.plotly.express as px\nfrom vizro import Vizro\nimport vizro.models as vm\ndf = px.data.iris()\npage = vm.Page(\ntitle=\"My first dashboard\",\ncomponents=[\nvm.Graph(id=\"scatter_chart\", figure=px.scatter(df, x=\"sepal_length\", y=\"petal_width\", color=\"species\")),\nvm.Graph(id=\"bar_chart\", figure=px.bar(df, x=\"sepal_width\", y=\"petal_length\", color=\"species\")),\n],\ncontrols=[\nvm.Filter(column=\"species\"),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <p></p> <p>After running the dashboard, you can access the dashboard by typing <code>localhost:8050</code> in the browser of your choice.</p>"},{"location":"pages/tutorials/first_dashboard/#4-explore-further","title":"4. Explore further","text":"<p>You are now ready to explore our documentation further, as you can now easily evaluate all examples.</p> <p>One place to start would be the more complete Explore Vizro tutorial.</p>"},{"location":"pages/user_guides/actions/","title":"How to use Actions","text":"<p>This guide shows you how to use <code>Actions</code>, a new concept in Vizro that is similar, but not identical to <code>Callbacks</code> in <code>Dash</code>. Many components of a dashboard (eg. <code>Graph</code> or <code>Button</code>) have an optional <code>actions</code> argument, where you can enter the <code>Action</code> model.</p> <p>In a nutshell, using the <code>Action</code> model together with an <code>action function</code> allows you to create complex functionality on a variety of triggers in your dashboard. There is already a range of re-usable <code>action functions</code> available.</p> Overview of currently available pre-defined <code>action functions</code> <ul> <li><code>export_data</code></li> <li><code>filter_interaction</code></li> </ul>"},{"location":"pages/user_guides/actions/#pre-defined-actions","title":"Pre-defined actions","text":"<p>To attach an action to a component, you must enter the <code>Action</code> model into the component's <code>action</code> argument. You can then add a desired pre-defined <code>action function</code> into the <code>function</code> argument of the <code>Action</code>.</p> Note on <code>Trigger</code> <p>Currently each component has one pre-defined trigger property. A trigger property is an attribute of the component that triggers a configured action (e.g. for the <code>Button</code> it is <code>n_click</code>).</p> <p>The below sections are guides on how to leverage pre-defined action functions</p>"},{"location":"pages/user_guides/actions/#export-data","title":"Export data","text":"<p>In order to enable downloading data, you can add the <code>export_data</code> action function to the <code>Button</code> component. Hence, as a result, when a dashboard user now clicks the button, all data on the page will be downloaded.</p> <p><code>export_data</code></p> app.pyapp.yamlResult <pre><code>import vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro._actions import export_data\niris = px.data.iris()\npage = vm.Page(\ntitle=\"Using actions\",\ncomponents=[\nvm.Graph(\nid=\"scatter\",\nfigure=px.scatter(iris, x=\"petal_length\", y=\"sepal_length\", color=\"sepal_width\"),\n),\nvm.Graph(\nid=\"bar\",\nfigure=px.bar(iris, x=\"petal_length\", y=\"sepal_length\", color=\"species\"),\n),\nvm.Button(\ntext=\"Export data\",\nactions=[\nvm.Action(\nfunction=export_data()\n),\n],\n),\n],\ncontrols=[\nvm.Filter(column=\"species\"),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nif __name__ == \"__main__\":\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- type: graph\nid: scatter\nfigure:\n_target_: scatter\ndata_frame: iris\ncolor: sepal_width\nx: petal_length\ny: sepal_length\n- type: graph\nid: bar\nfigure:\n_target_: bar\ndata_frame: iris\ncolor: species\nx: petal_length\ny: sepal_length\n- type: button\ntext: Export data\nid: export_data_button\nactions:\n- function:\n_target_: export_data\ncontrols:\n- type: filter\ncolumn: species\ntitle: Exporting\n</code></pre> <p></p>"},{"location":"pages/user_guides/actions/#filter-data-by-clicking-on-chart","title":"Filter data by clicking on chart","text":"<p>To enable filtering when clicking on data in a (source) chart, you can add the <code>filter_interaction</code> action function to the <code>Graph</code> component. The <code>filter_interaction</code> is currently configured to be triggered on click only.</p> <p>To configure this chart interaction follow the steps below:</p> <ol> <li>Add the action function to the source <code>Graph</code> and a list of IDs of the target charts into <code>targets</code> <pre><code>actions=[vm.Action(function=filter_interaction(targets=[\"scatter_relation_2007\"]))]\n</code></pre></li> <li>Enter the filter columns in the <code>custom_data</code> argument of the underlying source chart <code>function</code> <pre><code>Graph(figure=px.scatter(..., custom_data=[\"continent\"]))\n</code></pre>     Selecting a data point with a corresponding value of \"Africa\" in the continent column will result in filtering the dataset of target charts to show only entries with \"Africa\" in the continent column. The same applies when providing multiple columns in <code>custom_data</code>.</li> </ol> <p>Tip</p> <ul> <li>You can reset your chart interaction filters by refreshing the page</li> <li>You can create a \"self-interaction\" by providing the source chart id as its own <code>target</code></li> </ul> <p><code>filter_interaction</code></p> app.pyapp.yamlResult <pre><code>import vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.actions import filter_interaction\ndf_gapminder = px.data.gapminder().query(\"year == 2007\")\ndashboard = vm.Dashboard(\npages=[\nvm.Page(\ntitle=\"Filter interaction\",\ncomponents=[\nvm.Graph(\nid=\"bar_relation_2007\",\nfigure=px.box(\ndf_gapminder,\nx=\"continent\",\ny=\"lifeExp\",\ncolor=\"continent\",\ncustom_data=[\"continent\"],\n),\nactions=[vm.Action(function=filter_interaction(targets=[\"scatter_relation_2007\"]))],\n),\nvm.Graph(\nid=\"scatter_relation_2007\",\nfigure=px.scatter(\ndf_gapminder,\nx=\"gdpPercap\",\ny=\"lifeExp\",\nsize=\"pop\",\ncolor=\"continent\",\n),\n),\n],\n),\n]\n)\nif __name__ == \"__main__\":\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- type: graph\nid: bar_relation_2007\nfigure:\n_target_: box\ndata_frame: gapminder\ncolor: continent\nx: continent\ny: lifeExp\ncustom_data:\n- continent\nactions:\n- function:\n_target_: filter_interaction\ntargets:\n- scatter_relation_2007\n- type: graph\nid: scatter_relation_2007\nfigure:\n_target_: scatter\ndata_frame: gapminder\ncolor: continent\nx: gdpPercap\ny: lifeExp\nsize: pop\ntitle: Filter interaction\n</code></pre> <p></p>"},{"location":"pages/user_guides/actions/#predefined-actions-customization","title":"Predefined actions customization","text":"<p>Many predefined actions are customizable which helps to achieve more specific desired goal. For specific options, please refer to the API reference on this topic.</p>"},{"location":"pages/user_guides/actions/#actions-chaining","title":"Actions chaining","text":"<p>The <code>actions</code> parameter for the different screen components accepts a <code>List</code> of <code>Action</code> models. This means that it's possible to set a list of actions that will be executed by triggering only one component. The order of action execution is guaranteed, and the next action in the list will start executing only when the previous one is completed.</p> <p>Actions chaining</p> app.pyapp.yamlResult <pre><code>import vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro._actions import export_data\niris = px.data.iris()\npage = vm.Page(\ntitle=\"Using actions\",\ncomponents=[\nvm.Graph(\nid=\"scatter\",\nfigure=px.scatter(iris, x=\"petal_length\", y=\"sepal_length\", color=\"sepal_width\"),\n),\nvm.Graph(\nid=\"bar\",\nfigure=px.bar(iris, x=\"petal_length\", y=\"sepal_length\", color=\"species\"),\n),\nvm.Button(\ntext=\"Export data\",\nactions=[\nvm.Action(\nfunction=export_data(\ntargets=[\"scatter\"],\n)\n),\nvm.Action(\nfunction=export_data(\ntargets=[\"bar\"],\nfile_format=\"xlsx\",\n)\n),\n],\n),\n],\ncontrols=[\nvm.Filter(column=\"species\"),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nif __name__ == \"__main__\":\nVizro().build(dashboard).run()\n</code></pre> <pre><code>pages:\n- components:\n- type: graph\nid: scatter\nfigure:\n_target_: scatter\ndata_frame: iris\ncolor: sepal_width\nx: petal_length\ny: sepal_length\n- type: graph\nid: bar\nfigure:\n_target_: bar\ndata_frame: iris\ncolor: species\nx: petal_length\ny: sepal_length\n- type: button\ntext: Export data\nid: export_data_button\nactions:\n- function:\n_target_: export_data\ntargets:\n- scatter\n- function:\n_target_: export_data\ntargets:\n- bar\nfile_format: xlsx\ncontrols:\n- type: filter\ncolumn: species\ntitle: Exporting\n</code></pre> <p></p>"},{"location":"pages/user_guides/actions/#custom-actions","title":"Custom actions","text":"<p>Coming soon!</p> <p>Warning</p> <p>When creating your own custom action functions (as this is already possible without official support), you are responsible for the security of your creation. Vizro cannot guarantee the security of custom created action functions, so make sure you keep this in mind when publicly deploying your dashboard.</p>"},{"location":"pages/user_guides/assets/","title":"How to add static assets","text":"<p>This guide shows you how to add static assets to your dashboard. Static assets are images that you would like to show in your dashboard, or custom CSS and JS files with which you would like to enhance/change the appearance of your dashboard.</p> <p>To add images, custom CSS or JS files, create a folder named <code>assets</code> in the root of your app directory and insert your files. Assets included in that folder are automatically served after serving Vizro's static files via the <code>external_stylesheets</code>  and <code>external_scripts</code> arguments of Dash. The user-provided <code>assets</code> folder thus always takes precedence.</p> Example folder structure<pre><code>\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 assets\n\u2502\u00a0  \u251c\u2500\u2500 css\n\u2502\u00a0      \u251c\u2500\u2500 **/*.css\n\u2502\u00a0  \u251c\u2500\u2500 images\n\u2502\u00a0      \u251c\u2500\u2500 icons\n\u2502\u00a0          \u251c\u2500\u2500 collections.svg\n\u251c\u2500\u2500 favicon.ico\n</code></pre>"},{"location":"pages/user_guides/assets/#adding-static-images","title":"Adding static images","text":"<p>We leverage Dash's underlying functionalities to embed images into the app. For more information, see here.</p> <p>For example, you can leverage the <code>dash.get_asset_url()</code> function in your custom components, such that any provided path does not require <code>assets</code> as a prefix in the relative path anymore.</p>"},{"location":"pages/user_guides/assets/#changing-the-favicon","title":"Changing the favicon","text":"<p>To change the default favicon (website icon appearing in the browser tab), add a file named <code>favicon.ico</code> to your <code>assets</code> folder. For more information, see here.</p>"},{"location":"pages/user_guides/assets/#overwriting-css-properties","title":"Overwriting CSS properties","text":"<p>To overwrite any CSS properties of existing Vizro components, target the right CSS property and place your CSS files in the <code>assets</code> folder. This will overwrite any existing defaults for that CSS property. For reference, all Vizro CSS files can be found here.</p> <p>Customising CSS</p> my_css_file.css <pre><code>h1, h2 {\ncolor: hotpink;\n}\n</code></pre> app.pyapp.yamlResult <pre><code>import vizro.models as vm\nfrom vizro import Vizro\npage = vm.Page(\ntitle=\"Changing the header color\",\ncomponents=[\nvm.Card(\ntext=\"\"\"\n                    # This is an &lt;h1&gt; tag\n                    ## This is an &lt;h2&gt; tag\n                    ###### This is an &lt;h6&gt; tag\n                \"\"\")\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- text: |\n# This is an &lt;h1&gt; tag\n## This is an &lt;h2&gt; tag\n###### This is an &lt;h6&gt; tag\ntype: card\ntitle: Changing the header color\n</code></pre> <p></p> Note <p>CSS properties will be applied with the last served file taking precedence. Files are served in alphanumerical order.</p> <p>Order of CSS being served to app</p> <ol> <li>Dash styling sheets</li> <li>Vizro external styling sheets</li> <li>User assets folder<ul> <li>CSS/JS Files</li> <li>Folders</li> <li>CSS/JS Files</li> </ul> </li> </ol>"},{"location":"pages/user_guides/assets/#changing-the-assets-folder-path","title":"Changing the <code>assets</code> folder path","text":"<p>If you do not want to place your <code>assets</code> folder in the root directory of your app, you can also change the reference to your <code>assets</code> folder. Note that the path provided needs to be an absolute path.</p> <pre><code>from vizro import Vizro\nimport vizro.models as vm\npage = &lt;INSERT CONFIGURATION HERE&gt;\ndashboard = vm.Dashboard(pages=[page])\nVizro._user_assets_folder = \"absolute/path/to/assets\"\napp = Vizro().build(dashboard).run()\n</code></pre> <p>Note that in the example above, you still need to configure your <code>Page</code>. A guide on how to do that you can find here</p>"},{"location":"pages/user_guides/components/","title":"How to use charts/components","text":"<p>This guide shows you how to use charts/components to visualize your data in the dashboard.</p> <p>The <code>Page</code> models accepts the <code>components</code> argument, where you can enter your visual content e.g. <code>Graph</code>, <code>Card</code> or <code>Button</code>.</p>"},{"location":"pages/user_guides/components/#graph","title":"Graph","text":"<p>The <code>Graph</code> model is the most used component in many dashboards, allowing you to visualize data in a variety of ways.</p> <p>You can add a <code>Graph</code> to your dashboard by inserting the <code>Graph</code> model into the <code>components</code> argument of the <code>Page</code> model. You will need to specify the <code>figure</code> argument, where you can enter any of the currently available charts of the open source library <code>plotly.express</code>.</p> <p>Note</p> <p>Note that in order to use the <code>plotly.express</code> chart in a Vizro dashboard, you need to import it as <code>import vizro.plotly.express as px</code>. This leaves any of the <code>plotly.express</code> functionality untouched, but allows direct insertion into the <code>Graph</code> model as is.</p> <p>Graph</p> app.pyapp.yamlResult <pre><code>import vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\ndf = px.data.iris()\npage = vm.Page(\ntitle=\"My first page\",\ncomponents=[\nvm.Graph(\nid=\"my_chart\",\nfigure=px.scatter_matrix(\ndf, dimensions=[\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\"], color=\"species\"\n),\n),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- figure:\n_target_: scatter_matrix\ncolor: species\ndata_frame: iris\ndimensions: [\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\"]\nid: my_chart\ntype: graph\ntitle: My first page\n</code></pre> <p></p> <p>Note that in the above example we directly inserted the chart into the <code>figure</code> argument for the <code>.py</code> version. This is also the simplest way to connect your chart to a Pandas <code>DataFrame</code> - for other connections, please refer to this guide. For the <code>yaml</code> version, we simply referred to the <code>plotly.express</code> name by string.</p> Info <p>When importing Vizro, we automatically set the <code>plotly</code> default template to a custom designed template. In case you would like to set the default back, simply run <pre><code>import plotly.io as pio\npio.templates.default = \"plotly\"\n</code></pre> or enter your desired template into any <code>plotly.express</code> chart as <code>template=\"plotly\"</code> on a case-by-case basis. Note that we do not recommend the above steps for use in dashboards, as other templates will look out-of-sync with overall dashboard design.</p>"},{"location":"pages/user_guides/components/#card","title":"Card","text":"<p>The <code>Card</code> is a flexible and extensible component, allowing for customization via Markdown text. For a basic guide on markdown text, please refer to the documentation here.</p> <p>You can add a <code>Card</code> to your dashboard by inserting the <code>Card</code> into the <code>components</code> argument of the <code>Page</code>.</p> <p>Card</p> app.pyapp.yamlResult <pre><code>import vizro.models as vm\nfrom vizro import Vizro\npage = vm.Page(\ntitle=\"Card\",\ncomponents=[\nvm.Card(\ntext=\"\"\"\n                ### Card Title\n                Commodi repudiandae consequuntur voluptatum.\n            \"\"\",\n),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- text: |\nCommodi repudiandae consequuntur voluptatum.\ntitle: Card Title\ntype: card\ntitle: Card\n</code></pre> <p></p>"},{"location":"pages/user_guides/components/#customizing-text","title":"Customizing text","text":"<p>The <code>Card</code> utilizes the <code>dcc.Markdown</code> component from Dash as its underlying text component. For more details on customizing the markdown text, refer to the <code>dcc.Markdown</code> component documentation here. Based on the provided examples from Dash, the <code>Card</code> model supports the following:</p> <ul> <li>Headers</li> <li>Emphasis</li> <li>Lists</li> <li>Block Quotes</li> <li>Links</li> </ul> <p>Card with custom text</p> app.pyapp.yamlResult <pre><code>import vizro.models as vm\nfrom vizro import Vizro\npage = vm.Page(\ntitle=\"Customizing Text\",\ncomponents=[\nvm.Card(\ntext=\"\"\"\n                # Header level 1 &lt;h1&gt;\n                ## Header level 2 &lt;h2&gt;\n                ### Header level 3 &lt;h3&gt;\n                #### Header level 4 &lt;h4&gt;\n            \"\"\",\n),\nvm.Card(\ntext=\"\"\"\n                 ### Paragraphs\n                 Commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit.\n                 Fugiat iusto fuga praesentium option, eaque rerum! Provident similique accusantium nemo autem.\n                 Obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\n                 Culpa officia aut! Impedit sit sunt quaerat, odit, tenetur error, harum nesciunt ipsum debitis quas.\n            \"\"\",\n),\nvm.Card(\ntext=\"\"\"\n                ### Block Quotes\n                &gt;\n                &gt; A block quote is a long quotation, indented to create a separate block of text.\n                &gt;\n            \"\"\",\n),\nvm.Card(\ntext=\"\"\"\n                ### Lists\n                * Item A\n                    * Sub Item 1\n                    * Sub Item 2\n                * Item B\n            \"\"\",\n),\nvm.Card(\ntext=\"\"\"\n                ### Emphasis\n                This word will be *italic*\n                This word will be **bold**\n                This word will be _**bold and italic**_\n            \"\"\",\n),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- text: |\n# Header level 1 &lt;h1&gt;\n## Header level 2 &lt;h2&gt;\n### Header level 3 &lt;h3&gt;\n#### Header level 4 &lt;h4&gt;\ntype: card\n- text: |\nCommodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit.\nFugiat iusto fuga praesentium option, eaque rerum! Provident similique accusantium nemo autem.\nObcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\nCulpa officia aut! Impedit sit sunt quaerat, odit, tenetur error, harum nesciunt ipsum debitis quas.\ntitle: Paragraphs\ntype: card\n- text: |\n&gt;\n&gt; A block quote is a long quotation, indented to create a separate block of text.\n&gt;\ntitle: Block Quotes\ntype: card\n- text: |\n* Item A\n* Sub Item 1\n* Sub Item 2\n* Item B\ntitle: Lists\ntype: card\n- text: |\nThis word will be *italic*\nThis word will be **bold**\nThis word will be _**bold and italic**_\ntitle: Emphasis\ntype: card\ntitle: Customizing Text\n</code></pre> <p></p>"},{"location":"pages/user_guides/components/#placing-images","title":"Placing images","text":"<p>Images can be added to the <code>text</code> parameter by using the standard markdown syntax:</p> <p><code>![Image ALT text](Image URL)</code></p> <p>An image ALT text provides a description to your image and serves e.g. as a text placeholder or to improve the accessibility of your app. Providing an image ALT text is optional.</p> <ol> <li>To use a relative Image URL, place an image of your choice into your <code>assets</code> folder first</li> <li>Use markdown to render your image by using one of the following syntax:<ul> <li>Relative Image URL: <code>![Image ALT text](/path/to/image.png)</code></li> <li>Absolute Image URL: <code>![Image ALT text](https://XXXXXX)</code></li> </ul> </li> </ol> <p>Card with image</p> app.pyapp.yamlResult <pre><code>import vizro.models as vm\nfrom vizro import Vizro\npage = vm.Page(\ntitle=\"Placing Images\",\ncomponents=[\nvm.Card(\ntext=\"\"\"\n                ### My card with image!\n                ![continent](assets/images/continents/africa.svg)\n                 Commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit.\n                 Fugiat iusto fuga praesentium option, eaque rerum! Provident similique accusantium nemo autem.\n                 Obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\n            \"\"\",\n),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- text: |\n![continent](assets/images/continents/africa.svg)\nCommodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit.\nFugiat iusto fuga praesentium option, eaque rerum! Provident similique accusantium nemo autem.\nObcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\ntitle: My card with image!\ntype: card\ntitle: Placing Images\n</code></pre> <p></p> <p>Note</p> <p>Note that inserting images using html is by default turned off by the <code>dcc.Markdown</code> to prevent users being exposed to cross-site scripting attacks. If you need to turn it on, a custom component would have to be created.</p> <p>You might notice that the image is quite large, find out how to style images (e.g. position and size) in the next section!</p>"},{"location":"pages/user_guides/components/#styling-images","title":"Styling images","text":"<p>To change the styling of the image (e.g. size or position), add a URL hash to your image like this:</p> <p><code>![Image ALT text](Image URL#my-image)</code></p> <p>Note the added URL hash <code>#my-image</code>. Now create a CSS file placed in your <code>assets</code> folder and provide an attribute selector to select images with that matching URL hash.</p> <p>Card with styled image</p> images.css <pre><code>img[src*=\"#my-image\"] {\nwidth: 120px;\nheight: 120px;\n}\n</code></pre> app.pyapp.yamlResult <pre><code>import vizro.models as vm\nfrom vizro import Vizro\npage = vm.Page(\ntitle=\"Styling Images\",\ncomponents=[\nvm.Card(\ntext=\"\"\"\n                ### My card with image!\n                ![](assets/images/continents/africa.svg#my-image)\n                 Commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit.\n                 Fugiat iusto fuga praesentium option, eaque rerum! Provident similique accusantium nemo autem.\n                 Obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\n            \"\"\",\n),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- text: |\n![](assets/images/continents/africa.svg#my-image)\nCommodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit.\nFugiat iusto fuga praesentium option, eaque rerum! Provident similique accusantium nemo autem.\nObcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\ntitle: My card with image!\ntype: card\ntitle: Styling Images\n</code></pre> <p></p> Tip <p>Use the following pre-defined URL hashes in your image path to have the image float next to the text:</p> <ul> <li>floating-left: <code>![](my_image.png#floating-left)</code></li> <li>floating-right: <code>![](my_image.png#floating-right)</code></li> <li>floating-center: <code>![](my_image.png#floating-center)</code></li> </ul> <p>Card with floating image</p> app.pyapp.yamlResult <pre><code>import vizro.models as vm\nfrom vizro import Vizro\npage = vm.Page(\ntitle=\"Floating Images\",\ncomponents=[\nvm.Card(\ntext=\"\"\"\n                ### My card with image!\n                ![](assets/images/continents/africa.svg#my-image#floating-right)\n                 Commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit.\n                 Fugiat iusto fuga praesentium option, eaque rerum! Provident similique accusantium nemo autem.\n                 Obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\n                 Culpa officia aut! Impedit sit sunt quaerat, odit, tenetur error, harum nesciunt ipsum debitis quas.\n                 Obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\n                Culpa officia aut! Impedit sit sunt quaerat, odit, tenetur error, harum nesciunt ipsum debitis quas.\n            \"\"\",\n),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- text: |\n![](assets/images/continents/africa.svg#my-image#floating-right)\nCommodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit.\nFugiat iusto fuga praesentium option, eaque rerum! Provident similique accusantium nemo autem.\nObcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\nCulpa officia aut! Impedit sit sunt quaerat, odit, tenetur error, harum nesciunt ipsum debitis quas.\nObcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\nCulpa officia aut! Impedit sit sunt quaerat, odit, tenetur error, harum nesciunt ipsum debitis quas.\ntitle: My card with image!\ntype: card\ntitle: Floating Images\n</code></pre> <p></p>"},{"location":"pages/user_guides/components/#creating-navigation","title":"Creating navigation","text":"<p>A navigation card allows you to navigate to a different page via a click on the card area. To create a navigation card, do the following:</p> <ul> <li>Insert the <code>Card</code> into the <code>components</code> argument of the <code>Page</code></li> <li>Provide the <code>text</code> parameter with a title and some description</li> <li>Provide the <code>href</code> parameter (relative or absolute URL)</li> </ul> <p>Navigation Card</p> app.pyapp.yamlResult <pre><code>import vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\niris = px.data.iris()\npage_1 = vm.Page(\ntitle=\"Homepage\",\ncomponents=[\nvm.Card(\ntext=\"\"\"\n            ### Filters and parameters\n            Leads to the first page on click.\n            \"\"\",\nhref=\"/filters-and-parameters\",\n),\nvm.Card(\ntext=\"\"\"\n            ### Google - External Link\n            Leads to an external link on click.\n            \"\"\",\nhref=\"https://google.com\",\n),\n],\n)\npage_2 = vm.Page(\ntitle=\"Filters and parameters\",\npath=\"filters-and-parameters\",\ncomponents=[\nvm.Graph(id=\"scatter\", figure=px.scatter(iris, x=\"sepal_length\", y=\"petal_width\", color=\"sepal_width\")),\n],\n)\ndashboard = vm.Dashboard(pages=[page_1, page_2])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- text: |\n### Filters and parameters\nLeads to the first page on click\nhref: /filters-and-parameters\ntype: card\n- text: |\n### Google - External Link\nLeads to an external link on click.\nhref: https://google.com\ntype: card\ntitle: Homepage\n- components:\n- figure:\n_target_: scatter\ncolor: sepal_width\ndata_frame: iris\nx: sepal_length\ny: petal_width\nid: scatter\ntype: graph\ntitle: Filters and parameters\n</code></pre> <p></p> <p>If you now click on the card area, you should automatically be redirected to the relevant <code>href</code>.</p> Note <p>When using the <code>Card</code>, keep the following considerations in mind:</p> <ul> <li>If the href provided is a relative URL, it should match the <code>path</code> of the <code>Page</code> that the <code>Card</code> should navigate to.</li> <li>If the href provided is an absolute link, it should start with <code>https://</code> or an equivalent protocol.</li> </ul>"},{"location":"pages/user_guides/components/#adding-an-icon","title":"Adding an icon","text":"<p>If you want to add an icon to your card, just add your image as described in the previous section If you use the image URL hash <code>icon-top</code>, the image will be styled according to our default icon styling.</p> <p>Navigation Card with Icon</p> app.pyapp.yamlResult <pre><code>import vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\niris = px.data.iris()\npage_1 = vm.Page(\ntitle=\"Homepage\",\ncomponents=[\nvm.Card(\ntext=\"\"\"\n            ![](assets/images/icons/content/hypotheses.svg#icon-top)\n            ### Filters and parameters\n            Leads to the first page on click.\n            \"\"\",\nhref=\"/filters-and-parameters\",\n),\nvm.Card(\ntext=\"\"\"\n            ![](assets/images/icons/content/features.svg#icon-top)\n            ### Google - External Link\n            Leads to an external link on click.\n            \"\"\",\nhref=\"https://google.com\",\n),\n],\n)\npage_2 = vm.Page(\ntitle=\"Filters and parameters\",\npath=\"filters-and-parameters\",\ncomponents=[\nvm.Graph(id=\"scatter\", figure=px.scatter(iris, x=\"sepal_length\", y=\"petal_width\", color=\"sepal_width\")),\n],\n)\ndashboard = vm.Dashboard(pages=[page_1, page_2])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- text: |\n![](assets/images/icons/content/hypotheses.svg#icon-top)\n### Filters and parameters\nLeads to the first page on click\nhref: /filters-and-parameters\ntype: card\n- text: |\n![](assets/images/icons/content/features.svg#icon-top)\n### Google - External Link\nLeads to an external link on click.\nhref: https://google.com\ntype: card\ntitle: Homepage\n- components:\n- figure:\n_target_: scatter\ncolor: sepal_width\ndata_frame: iris\nx: sepal_length\ny: petal_width\nid: scatter\ntype: graph\ntitle: Filters and parameters\n</code></pre> <p></p> <p>Note that in the above example the first <code>Card</code> navigates to an existing <code>Page</code> in the app with <code>path = filters-and-parameters</code> and the second one to an external link.</p>"},{"location":"pages/user_guides/components/#button","title":"Button","text":"<p>To enhance dashboard interactions, you can use the <code>Button</code> component to trigger any pre-defined action functions such as e.g. exporting chart data. Please refer to the user guide on <code>Actions</code> for currently available options.</p> <p>To add a <code>Button</code>, simply insert it into the <code>components</code> argument of the <code>Page</code>.</p> <p>You can configure the <code>text</code> argument to alter the display text of the <code>Button</code> and the <code>actions</code> argument to define which action function should be executed on button click.</p> <p>In the below example we show how to configure a button to export the filtered data of a target chart using export_data, a pre-defined action function.</p> <p>Button</p> app.pyapp.yamlResult <pre><code>import vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.actions import export_data\ndf = px.data.iris()\npage = vm.Page(\ntitle=\"My first page\",\nlayout=vm.Layout(grid=[[0], [0], [0], [0], [1]]),\ncomponents=[\nvm.Graph(\nid=\"scatter_chart\",\nfigure=px.scatter(\ndf,\nx=\"sepal_width\",\ny=\"sepal_length\",\ncolor=\"species\",\nsize=\"petal_length\",\n),\n),\nvm.Button(\ntext=\"Export data\",\nactions=[vm.Action(function=export_data(targets=[\"scatter_chart\"]))],\n),\n],\ncontrols=[\nvm.Filter(column=\"species\")\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- figure:\n_target_: scatter\nx: sepal_width\ny: sepal_length\ncolor: species\nsize: petal_length\ndata_frame: iris\nid: scatter_chart\ntype: graph\n- type: button\ntext: Export data\nid: export_data\nactions:\n- function:\n_target_: export_data\ntargets:\n- scatter_chart\ncontrols:\n- column: species\nselector:\ntype: dropdown\ntype: filter\nlayout:\ngrid:\n- [0]\n- [0]\n- [0]\n- [0]\n- [1]\ntitle: My first page\n</code></pre> <p></p>"},{"location":"pages/user_guides/control/","title":"How to use controls","text":"<p>This guide shows you how to add controls to your dashboard. The main way to interact with the charts/components on your page is by filtering the underlying data or by changing the parameters of the underlying function.</p> <p>The <code>Page</code> model accepts the <code>controls</code> argument, where you can enter either a <code>Filter</code> or a <code>Parameter</code> model. Both these models allow the automatic creation of selectors (e.g. Dropdown, RadioItems, Slider, ...) that let a dashboard user interact with the charts/components on the screen.</p>"},{"location":"pages/user_guides/control/#filters","title":"Filters","text":"<p>Filters are one of the main ways to interact with a chart/component in a dashboard. A filter selects a subset or rows of a component's underlying DataFrame which alters the appearance of that component on the page.</p>"},{"location":"pages/user_guides/control/#basic-filters","title":"Basic Filters","text":"<p>You can add a filter to your page by adding the <code>Filter</code> model into the <code>controls</code> argument of the <code>Page</code> model. <code>Filter</code> requires only the <code>column</code> argument, which denotes the target column to be filtered. By default, all components on a page with such a column present will be filtered. The selector type will be chosen automatically based on the target column, a dropdown for categorical data, a range slider for numerical data.</p> <p>Basic Filter</p> app.pyapp.yamlResult <pre><code>from vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\niris = px.data.iris()\npage = vm.Page(\ntitle=\"My first page\",\ncomponents=[\nvm.Graph(id=\"scatter_chart\", figure=px.scatter(iris, x=\"sepal_length\", y=\"petal_width\", color=\"species\")),\n],\ncontrols=[\nvm.Filter(column=\"species\"),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration - see from_yaml example\npages:\n- components:\n- figure:\n_target_: scatter\ndata_frame: iris\nx: sepal_length\ny: petal_width\ncolor: species\nid: scatter_chart\ntype: graph\ncontrols:\n- column: species\ntype: filter\ntitle: My first page\n</code></pre> <p></p>"},{"location":"pages/user_guides/control/#changing-selectors","title":"Changing Selectors","text":"<p>If you want to have a different selector for your filter, you can provide the <code>selector</code> argument of the <code>Filter</code> with a different selector model. Currently available selectors are <code>Checklist</code>, <code>Dropdown</code>, <code>RadioItems</code>, <code>RangeSlider</code> and <code>Slider</code>.</p> <p>Filter with custom Selector</p> app.pyapp.yamlResult <pre><code>from vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\niris = px.data.iris()\npage = vm.Page(\ntitle=\"My first page\",\ncomponents=[\nvm.Graph(id=\"scatter_chart\", figure=px.scatter(iris, x=\"sepal_length\", y=\"petal_width\")),\n],\ncontrols=[\nvm.Filter(column=\"species\",selector=vm.RadioItems()),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- figure:\n_target_: scatter\ndata_frame: iris\nx: sepal_length\ny: petal_width\nid: scatter_chart\ntype: graph\ncontrols:\n- column: species\nselector:\ntype: radio_items\ntype: filter\ntitle: My first page\n</code></pre> <p></p>"},{"location":"pages/user_guides/control/#further-customization","title":"Further customization","text":"<p>For further customizations, you can always refer to the <code>Filter</code> reference. Some popular choices are:</p> <ul> <li>determine which component the filter will apply to by using <code>targets</code></li> <li>determine what the target column type is, hence choosing the default selector by using <code>column_type</code></li> <li>choose options of lower level components, such as the <code>selector</code> models</li> </ul> <p>Below is an advanced example where we only target one page component, and where we further customize the chosen <code>selector</code>.</p> <p>Advanced Filter</p> app.pyapp.yamlResult <pre><code>from vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\niris = px.data.iris()\npage = vm.Page(\ntitle=\"My first page\",\ncomponents=[\nvm.Graph(id=\"scatter_chart\", figure=px.scatter(iris, x=\"sepal_length\", y=\"petal_width\", color=\"species\")),\nvm.Graph(id=\"scatter_chart2\", figure=px.scatter(iris, x=\"petal_length\", y=\"sepal_width\", color=\"species\")),\n],\ncontrols=[\nvm.Filter(column=\"petal_length\",targets=[\"scatter_chart\"],selector=vm.RangeSlider(step=1)),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- figure:\n_target_: scatter\ndata_frame: iris\nx: sepal_length\ny: petal_width\ncolor: species\nid: scatter_chart\ntype: graph\n- figure:\n_target_: scatter\ndata_frame: iris\nx: petal_length\ny: sepal_width\ncolor: species\nid: scatter_chart2\ntype: graph\ncontrols:\n- column: petal_length\ntargets:\n- scatter_chart\nselector:\nstep: 1\ntype: range_slider\ntype: filter\ntitle: My first page\n</code></pre> <p></p>"},{"location":"pages/user_guides/control/#parameters","title":"Parameters","text":"<p>Parameters are another convenient way to interact with a chart/component in a dashboard. A parameter essentially let's you alter the arguments of the underlying function that produces the target chart/component.</p>"},{"location":"pages/user_guides/control/#basic-parameters","title":"Basic Parameters","text":"<p>You can add a parameter to your page by adding the <code>Parameter</code> model into the <code>controls</code> argument of the <code>Page</code> model. <code>Parameter</code> requires the <code>targets</code> argument and the <code>selector</code> argument.</p> <p>In the <code>targets</code> argument, you can specify the component and function argument that the parameter should be applied to in the form of <code>&lt;target_component_id&gt;.&lt;target_argument&gt;</code> (eg. <code>scatter_chart.title</code>).</p> <p>Unlike for the <code>Filter</code> model, you also have to configure the <code>selector</code> argument, by providing it with an appropriate model and the desired options/numeric ranges.</p> <p>Basic Parameter</p> app.pyapp.yamlResult <pre><code>from vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\niris = px.data.iris()\npage = vm.Page(\ntitle=\"My first page\",\ncomponents=[\nvm.Graph(\nid=\"scatter_chart\",\nfigure=px.scatter(iris, title=\"My scatter chart\", x=\"sepal_length\", y=\"petal_width\", color=\"species\"),\n),\n],\ncontrols=[\nvm.Parameter(\ntargets=[\"scatter_chart.title\"],\nselector=vm.Dropdown(\noptions=[\"My scatter chart\", \"A better title!\", \"Another title...\"],\nmulti=False,\n),\n),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- figure:\n_target_: scatter\ndata_frame: iris\nx: sepal_length\ny: petal_width\ncolor: species\nid: scatter_chart\ntype: graph\ncontrols:\n- selector:\noptions: [\"My scatter chart\", \"A better title!\", \"Another title...\"]\nmulti: False\ntype: dropdown\ntargets:\n- scatter_chart.title\ntype: parameter\ntitle: My first page\n</code></pre> <p></p>"},{"location":"pages/user_guides/control/#nested-parameters","title":"Nested Parameters","text":"<p>If you want to modify nested parameters, you can specify the <code>targets</code> argument with a comma separated string like <code>&lt;target_component_id&gt;.&lt;target_argument&gt;.&lt;first_hierarchy&gt;</code>.</p> <p>Nested Parameters for multiple targets</p> app.pyapp.yamlResult <pre><code>from vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\niris = px.data.iris()\npage = vm.Page(\ntitle=\"My first page\",\ncomponents=[\nvm.Graph(\nid=\"scatter_chart\",\nfigure=px.scatter(\niris,\nx=\"sepal_width\",\ny=\"sepal_length\",\ncolor=\"species\",\nsize=\"petal_length\",\ncolor_discrete_map={\"setosa\": \"#00b4ff\", \"versicolor\": \"#ff9222\"},\n),\n),\nvm.Graph(\nid=\"bar_chart\",\nfigure=px.bar(\niris,\nx=\"sepal_width\",\ny=\"sepal_length\",\ncolor=\"species\",\ncolor_discrete_map={\"setosa\": \"#00b4ff\", \"versicolor\": \"#ff9222\"},\n),\n),\n],\ncontrols=[\nvm.Parameter(\ntargets=[\"scatter_chart.color_discrete_map.virginica\", \"bar_chart.color_discrete_map.virginica\"],\nselector=vm.Dropdown(\noptions=[\"#ff5267\", \"#3949ab\"],\nmulti=False,\nvalue=\"#3949ab\",\n),\n),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- figure:\n_target_: scatter\ndata_frame: iris\nx: sepal_width\ny: sepal_length\nsize: petal_length\ncolor: species\ncolor_discrete_map: {\"setosa\": \"#00b4ff\", \"versicolor\": \"#ff9222\"}\nid: scatter_chart\ntype: graph\n- figure:\n_target_: bar\ndata_frame: iris\nx: sepal_width\ny: sepal_length\ncolor: species\ncolor_discrete_map: {\"setosa\": \"#00b4ff\", \"versicolor\": \"#ff9222\"}\nid: bar_chart\ntype: graph\ncontrols:\n- selector:\noptions: [\"#ff5267\", \"#3949ab\"]\nvalue: #3949ab\nmulti: False\ntype: dropdown\ntargets: [\"scatter_chart.color_discrete_map.virginica\", \"bar_chart.color_discrete_map.virginica\"]\ntype: parameter\ntitle: My first page\n</code></pre> <p></p> <p>In the above example, the object passed to the function argument <code>color_discrete_map</code> is a dictionary which maps the different flower species to fixed colors (eg. <code>{\"virginica\":\"blue\"}</code>). In this case we do not want to change the entire dictionary, but only the value <code>blue</code>. We do this by specifying a target as <code>scatter.color_discrete_map.virginica</code>.</p> <p>Note that in the above example we also have one parameter affect multiple targets.</p>"},{"location":"pages/user_guides/control/#selectors","title":"Selectors","text":""},{"location":"pages/user_guides/control/#categorical-selectors","title":"Categorical Selectors","text":"<p>Within the categorical selectors, a clear distinction exists between multi-option and single-option selectors. For instance, the <code>Checklist</code> functions as a multi-option selector by default while the <code>RadioItem</code> serves as a single-option selector by default. However, the <code>Dropdown</code> can function as both a multi-option or single-option selector.</p> <p>For more details, kindly refer to the documentation of the underlying dash components:</p> <ul> <li>dcc.Dropdown</li> <li>dcc.Checklist</li> <li>dcc.RadioItems</li> </ul> Note <p>When configuring the <code>options</code> of the categorical selectors, you can either provide:</p> <ul> <li>a list of values e.g. <code>options = ['Value A', 'Value B', 'Value C']</code></li> <li>or a dictionary of label-value mappings e.g. <code>options=[{'label': 'True', 'value': True}, {'label': 'False', 'value': False}]</code></li> </ul> <p>The later is required if you want to provide different display labels to your option values or in case you want to provide boolean values as options. In this case, you need to provide a string label for your boolean values as boolean values cannot be displayed properly as labels in the underlying dash components.</p>"},{"location":"pages/user_guides/control/#numerical-selectors","title":"Numerical Selectors","text":"<p>For more details, kindly refer to the documentation of the underlying dash components:</p> <ul> <li>dcc.Slider</li> <li>dcc.RangeSlider</li> </ul> Note <p>When configuring the <code>Slider</code> and the <code>RangeSlider</code> with float values, and using <code>step</code> with an integer value, you may notice unexpected behavior, such as the drag value being outside its indicated marks. To our knowledge, this is a current bug in the underlying <code>dcc.Slider</code> and <code>dcc.RangeSlider</code> component, which you can circumvent by adapting the <code>step</code> size accordingly.</p> <p>To enhance existing selectors, please see our How-to-guide on creating custom components</p>"},{"location":"pages/user_guides/custom_charts/","title":"How to create custom charts","text":"<p>This guide shows you how to create custom charts and how to add them to your dashboard.</p> <p>The <code>Graph</code> model accepts the <code>figure</code> argument, where you can enter any <code>plotly.express</code> chart as explained in the user guide on components.</p> <p>We always recommend starting with <code>plotly.express</code> charts first, but in case that none of the available charts fulfill your requirements, you can also use any custom created <code>plotly.graph_objects.Figure()</code> object (in short <code>go.Figure()</code>). It is equally possible to enhance the resulting <code>go.Figure()</code> of a <code>plotly.express</code> function call. In general, custom/customized charts need to obey the following conditions:</p> <p>Conditions for using any <code>go.Figure()</code> in <code>Graph</code></p> <ul> <li>a <code>go.Figure()</code> object is returned by a function</li> <li>this function must be decorated with the <code>@capture(\"graph\")</code> decorator</li> <li>this function accepts a <code>data_frame</code> argument (of type <code>pandas.DataFrame</code>)</li> <li>the visualization is derived from and requires only one <code>pandas.DataFrame</code> (e.g. any further dataframes added through other arguments will not react to dashboard components such as <code>Filter</code>)</li> </ul> <p>The below minimal example can be used as a base to build more sophisticated charts.</p> Minimal example of a custom chart<pre><code>from vizro.models.types import capture\n@capture(\"graph\")\ndef minimal_example(data_frame:pd.DataFrame=None):\nreturn go.Figure()\n</code></pre> <p>Building on the above, there are several routes one can take. The following examples are guides on the most common custom requests, but also serve as an illustration of more general principles:</p>"},{"location":"pages/user_guides/custom_charts/#enhanced-plotlyexpress-chart-with-reference-line","title":"Enhanced <code>plotly.express</code> chart with reference line","text":"<p>Custom waterfall chart</p> app.pyapp.yamlResult <pre><code>import vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.models.types import capture\n@capture(\"graph\")\ndef scatter_with_line(data_frame, x, y, color=None, size=None, hline=None):\nfig = px.scatter(data_frame=data_frame, x=x, y=y, color=color, size=size)\nfig.add_hline(y=hline, line_color=\"gray\")\nreturn fig\npage_0 = vm.Page(\ntitle=\"Custom chart\",\ncomponents=[\nvm.Graph(\nid=\"enhanced_scatter\",\nfigure=scatter_with_line(\nx=\"sepal_length\",\ny=\"sepal_width\",\ncolor=\"species\",\nsize=\"petal_width\",\nhline=3,\ndata_frame=px.data.iris(),\n),\n),\n],\ncontrols=[\nvm.Filter(column=\"petal_width\"),\n],\n)\ndashboard = vm.Dashboard(pages=[page_0])\nif __name__ == \"__main__\":\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Custom charts are currently only possible via python configuration\n</code></pre> <p></p>"},{"location":"pages/user_guides/custom_charts/#new-waterfall-chart-based-on-gofigure","title":"New Waterfall chart based on <code>go.Figure()</code>","text":"<p>The below examples shows a more involved use-case. We create and style a waterfall chart, and add it alongside a filter to the dashboard. The example is based on this tutorial.</p> <p>Custom waterfall chart</p> app.pyapp.yamlResult <pre><code>import pandas as pd\nimport plotly.graph_objects as go\nimport vizro.models as vm\nfrom vizro import Vizro\nfrom vizro.models.types import capture\ndef waterfall_data():\nreturn pd.DataFrame(\n{\n\"measure\": [\"relative\", \"relative\", \"total\", \"relative\", \"relative\", \"total\"],\n\"x\": [\"Sales\", \"Consulting\", \"Net revenue\", \"Purchases\", \"Other expenses\", \"Profit before tax\"],\n\"text\": [\"+60\", \"+80\", \"\", \"-40\", \"-20\", \"Total\"],\n\"y\": [60, 80, 0, -40, -20, 0],\n}\n)\n@capture(\"graph\")\ndef waterfall(data_frame, measure, x, y, text, title=None):\nfig = go.Figure()\nfig.add_traces(\ngo.Waterfall(\nmeasure=data_frame[measure],\nx=data_frame[x],\ny=data_frame[y],\ntext=data_frame[text],\ndecreasing={\"marker\": {\"color\": \"#ff5267\"}},\nincreasing={\"marker\": {\"color\": \"#08bdba\"}},\ntotals={\"marker\": {\"color\": \"#00b4ff\"}},\n),\n)\nfig.update_layout(title=title)\nreturn fig\npage_0 = vm.Page(\ntitle=\"Custom chart\",\ncomponents=[\nvm.Graph(\nid=\"waterfall\",\nfigure=waterfall(data_frame=waterfall_data(), measure=\"measure\", x=\"x\", y=\"y\", text=\"text\"),\n),\n],\ncontrols=[\nvm.Filter(column=\"x\", selector=vm.Dropdown(title=\"Financial categories\", multi=True)),\n],\n)\ndashboard = vm.Dashboard(pages=[page_0])\nif __name__ == \"__main__\":\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Custom charts are currently only possible via python configuration\n</code></pre> <p></p>"},{"location":"pages/user_guides/custom_components/","title":"How to create custom components","text":"<p>This guide shows you how to create custom components or enhance existing ones. What is a component? A component in this context would be any of the currently existing models such as e.g. <code>Filter</code>, <code>Parameter</code>, etc.</p> <p>Warning</p> <p>When creating your own custom components, you are responsible for the security of your creation. Vizro cannot guarantee the security of custom created components, so make sure you keep this in mind when publicly deploying your dashboard.</p> <p>Vizro's public API is deliberately kept small in order to facilitate quick and easy configuration of a dashboard. However, at the same time, Vizro is easily extensible, so that you can tweak any component to your liking or even create entirely new ones.</p> <p>Note</p> <p>There are always three general steps to consider in order to create a custom component:</p> <ol> <li>Sub-class to create your component</li> <li>Enhance or build the component (e.g. add/change model fields, overwrite pre-build/build method, etc.) to your desire</li> <li>Check if your component will be part of a discriminated union<sup>1</sup>. If yes, then<ul> <li>you must ensure your component has a <code>type</code> field</li> <li>you must register the new type with its parent model's relevant field (where the new component is entered into) with <code>add_type</code></li> </ul> </li> </ol> <p>We will refer back to these three steps in the two examples below.</p>"},{"location":"pages/user_guides/custom_components/#extend-an-existing-component","title":"Extend an existing component","text":"When to choose this strategy <p>You may want to use this strategy to:</p> <ul> <li>extend an existing component (e.g. adding a button to <code>Card</code>)</li> <li>change configurations we have set by default (e.g. setting <code>allowCross=False</code> in <code>RangeSlider</code>)</li> <li>change any fields of any models (e.g. changing the title field from <code>Optional</code> to have a default)</li> </ul> <p>You can extend an existing component by sub-classing the component you want to alter. The below example is a bit lengthy, but the annotations should guide you through the most important lines of that code. Remember that when sub-classing a component you have access to all fields of all parent models, but you can choose to overwrite any field or method, or define new ones.</p> <p>The aim for this example is to enhance the <code>RangeSlider</code> model so that one slider handle cannot cross the other, and to have a permanent tooltip showing the current value. You will note that it is often easier to copy parts of the source-code when needing to change complex methods such as the <code>build</code> method in the below example instead of attempting to write it from scratch.</p> <p>In this case, the general three steps translate into:</p> <ol> <li> <p>Sub-class existing <code>RangeSlider</code>: <pre><code>class TooltipNonCrossRangeSlider(vm.RangeSlider):\n</code></pre></p> </li> <li> <p>Enhance the component by changing the underlying parent <code>dcc.RangeSlider</code>: <pre><code>allowCross=False,\ntooltip={\"placement\": \"bottom\", \"always_visible\": True}\n</code></pre> These lines are highlighted in the example below. They are the only material change to the original <code>build</code> method.</p> </li> <li> <p>Since the new model will be inserted into the <code>selectors</code> argument of the <code>Filter</code> or <code>Parameter</code>, it will be part of the discriminated union describing the allowed types for that argument, in this case the <code>SelectorType</code>. Hence we must:</p> <ul> <li>define a new type: <pre><code>type: Literal[\"other_range_slider\"] = \"other_range_slider\"\n</code></pre></li> <li>register the type with the parent model(s): <pre><code>vm.Filter.add_type(\"selector\", TooltipNonCrossRangeSlider)\nvm.Parameter.add_type(\"selector\", TooltipNonCrossRangeSlider)\n</code></pre></li> </ul> </li> </ol> Example based on existing component app.pyyamlResult <pre><code>from dash import Input, Output, State, callback, callback_context, dcc, html\nfrom typing_extensions import Literal\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\niris = px.data.iris()\n# 1. Create custom component - here based on the existing RangeSlider\nclass TooltipNonCrossRangeSlider(vm.RangeSlider):\n\"\"\"Custom numeric multi-selector `TooltipNonCrossRangeSlider`.\"\"\"\ntype: Literal[\"other_range_slider\"] = \"other_range_slider\" # (1)!\ndef build(self):  # (2)!\nvalue = self.value or [self.min, self.max]  # type: ignore[list-item]\noutput = [\nOutput(f\"{self.id}_start_value\", \"value\"),\nOutput(f\"{self.id}_end_value\", \"value\"),\nOutput(self.id, \"value\"),\nOutput(f\"temp-store-range_slider-{self.id}\", \"data\"),\n]\ninput = [\nInput(f\"{self.id}_start_value\", \"value\"),\nInput(f\"{self.id}_end_value\", \"value\"),\nInput(self.id, \"value\"),\nState(f\"temp-store-range_slider-{self.id}\", \"data\"),\n]\n@callback(output=output, inputs=input)\ndef update_slider_values(start, end, slider, input_store):\ntrigger_id = callback_context.triggered_id\nif trigger_id == f\"{self.id}_start_value\" or trigger_id == f\"{self.id}_end_value\":\nstart_text_value, end_text_value = start, end\nelif trigger_id == self.id:\nstart_text_value, end_text_value = slider\nelse:\nstart_text_value, end_text_value = input_store if input_store is not None else value\nstart_value = min(start_text_value, end_text_value)\nend_value = max(start_text_value, end_text_value)\nstart_value = max(self.min, start_value)\nend_value = min(self.max, end_value)\nslider_value = [start_value, end_value]\nreturn start_value, end_value, slider_value, (start_value, end_value)\nreturn html.Div(\n[\nhtml.P(self.title, id=\"range_slider_title\") if self.title else None,\nhtml.Div(\n[\ndcc.RangeSlider(\nid=self.id,\nmin=self.min,\nmax=self.max,\nstep=self.step,\nmarks=self.marks,\nclassName=\"range_slider_control\" if self.step else \"range_slider_control_no_space\",\nvalue=value,\npersistence=True,\nallowCross=False, # (3)!\ntooltip={\"placement\": \"bottom\", \"always_visible\": True}, # (4)!\n),\nhtml.Div(\n[\ndcc.Input(\nid=f\"{self.id}_start_value\",\ntype=\"number\",\nplaceholder=\"start\",\nmin=self.min,\nmax=self.max,\nclassName=\"slider_input_field_left\"\nif self.step\nelse \"slider_input_field_no_space_left\",\nvalue=value[0],\nsize=\"24px\",\npersistence=True,\n),\ndcc.Input(\nid=f\"{self.id}_end_value\",\ntype=\"number\",\nplaceholder=\"end\",\nmin=self.min,\nmax=self.max,\nclassName=\"slider_input_field_right\"\nif self.step\nelse \"slider_input_field_no_space_right\",\nvalue=value[1],\npersistence=True,\n),\ndcc.Store(id=f\"temp-store-range_slider-{self.id}\", storage_type=\"local\"),\n],\nclassName=\"slider_input_container\",\n),\n],\nclassName=\"range_slider_inner_container\",\n),\n],\nclassName=\"selector_container\",\n)\n# 2. Add new components to expected type - here the selector of the parent components\nvm.Filter.add_type(\"selector\", TooltipNonCrossRangeSlider) # (5)!\nvm.Parameter.add_type(\"selector\", TooltipNonCrossRangeSlider) # (6)!\npage = vm.Page(\ntitle=\"Custom Component\",\npath=\"custom-component\",\ncomponents=[\nvm.Graph(\nid=\"for_custom_chart\",\nfigure=px.scatter(iris, title=\"Foo\", x=\"sepal_length\", y=\"petal_width\", color=\"sepal_width\"),\n),\n],\ncontrols=[\nvm.Filter(\ncolumn=\"sepal_length\",\ntargets=[\"for_custom_chart\"],\nselector=TooltipNonCrossRangeSlider(), # (7)!\n),\nvm.Parameter(\ntargets=[\"for_custom_chart.range_x\"],\nselector=TooltipNonCrossRangeSlider(title=\"Select x-axis range\", min=0, max=10),\n),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nif __name__ == \"__main__\":\nVizro().build(dashboard).run()\n</code></pre> <ol> <li>Here we provide a new type for the new component, so it can be distinguished in the discriminated union.</li> <li>Here we chose to mostly copy the source code of the build method and alter it directly. Alternatively we could overload the <code>build</code> method and alter the output of <code>super().build()</code>, but then we recommend pinning the version of <code>Vizro</code> in case of future breaking changes.</li> <li>This is the change that makes the <code>RangeSlider</code> not cross itself when moving the handle.</li> <li>This is the change that displays the tooltip below the handle.</li> <li>Don't forget! If part of a discriminated union, you must add the new component to the parent model where it will be inserted. In this case the new <code>TooltipNonCrossRangeSlider</code> will be inserted into the <code>selector</code> argument of the <code>Filter</code> model, and thus must be added as an allowed type.</li> <li>Don't forget! If part of a discriminated union, you must add the new component to the parent model where it will be inserted. In this case the new <code>TooltipNonCrossRangeSlider</code> will be inserted into the <code>selector</code> argument of the <code>Parameter</code> model, and thus must be added as an allowed type.</li> <li>The new component can now be inserted into a regular dashboard.</li> </ol> <pre><code># TBD\n</code></pre> <p></p>"},{"location":"pages/user_guides/custom_components/#entirely-new-component","title":"Entirely new component","text":"When to choose this strategy <p>You may want to use this strategy to:</p> <ul> <li>create a new component that does not exist in our library yet</li> <li>make extensive changes to an existing component</li> </ul> <p>You can create an entirely new component by sub-classing our VizroBaseModel. Note that using <code>VizroBaseModel</code> is mandatory if you want the new component to work in the Vizro framework.</p> <p>The aim of the example is to create a <code>Jumbotron</code>, a component that currently does not exist in Vizro's existing component range. It is a lightweight container to call attention to featured content or information.</p> Note on <code>build</code> and <code>pre_build</code> methods <p>Note that when creating new components, you will need to define a <code>build</code> method like in the below example if it is a visual component that is rendered on the page. Examples of components with a <code>build</code> method are:</p> <ul> <li><code>selector</code> type: <code>Checklist</code>, <code>Dropdown</code>, <code>RadioItems</code>, etc.</li> <li><code>component</code> type: <code>Graph</code>, <code>Card</code>, etc.</li> </ul> <p>For components that only create other components, you do not need to define a <code>build</code> method, e.g. for <code>Filter</code> and <code>Parameter</code>.</p> <p>If you would like to have access to other components, you may want to define a <code>pre_build</code> method. This method is automatically run for all models and makes them internally consistent. Notable existing models with <code>pre_build</code> methods are <code>Filter</code> and <code>Parameter</code>.</p> <p>In this case, the general steps translate for this example into:</p> <ol> <li> <p>Create new component, by sub-classing VizroBaseModel: <pre><code>class Jumbotron(vm.VizroBaseModel):\n</code></pre></p> </li> <li> <p>Build the component using existing <code>dash</code> components. <pre><code>return html.Div(\ndbc.Container(\n...\n)\n...\n)\n</code></pre></p> </li> <li>Since the new model will be inserted into the <code>components</code> argument of the <code>Page</code>, it will be part of the discriminated union describing the allowed types for that argument, in this case the <code>ComponentType</code>. Hence we must:<ul> <li>define a new type: <pre><code>type: Literal[\"jumbotron\"] = \"jumbotron\"\n</code></pre></li> <li>register the type with the parent model(s): <pre><code>vm.Page.add_new_type(\"components\", Jumbotron)\n</code></pre></li> </ul> </li> </ol> Example of entirely new component app.pyyamlResult <pre><code>from typing import Literal\nfrom dash import html\nimport vizro.models as vm\nfrom vizro import Vizro\n# 1. Create new custom component\nclass Jumbotron(vm.VizroBaseModel):  # (1)!\n\"\"\"New custom component `Jumbotron`.\"\"\"\ntype: Literal[\"jumbotron\"] = \"jumbotron\"  # (2)!\ntitle: str  # (3)!\nsubtitle: str\ntext: str\ndef build(self):  # (4)!\nreturn html.Div(\n[\nhtml.H2(self.title),\nhtml.H3(self.subtitle),\nhtml.P(self.text),\n]\n)\n# 2. Add new components to expected type - here the selector of the parent components\nvm.Page.add_type(\"components\", Jumbotron)  # (5)!\npage = vm.Page(\ntitle=\"Custom Component\",\npath=\"custom-component\",\ncomponents=[\nJumbotron(  # (6)!\nid=\"my_jumbotron\",\ntitle=\"Jumbotron\",\nsubtitle=\"This is a subtitle to summarize some content.\",\ntext=\"This is the main body of text of the Jumbotron.\",\n)\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nif __name__ == \"__main__\":\nVizro().build(dashboard).run()\n</code></pre> <ol> <li>Here we subclass the VizroBaseModel because we are creating a new component from scratch.</li> <li>Here we provide a new type for the new component, so it can be distinguished in the discriminated union.</li> <li>Here we provide other fields we think are useful for our components. These fields are the main way the new component can be configured. A lot of different functionality is possible here; see the Pydantic documentation for more details.</li> <li>As we are creating a new visual component, we have to define a <code>build</code> method.</li> <li>Don't forget! If part of a discriminated union, you must add the new component to the parent model where it will be inserted. In this case the new <code>Jumbotron</code> will be inserted into the <code>components</code> argument of the <code>Page</code> model, and thus must be added as an allowed type.</li> <li>The new component can now be inserted into a regular dashboard.</li> </ol> <pre><code># TBD\n</code></pre> <p></p> <ol> <li> <p>You can easily check if your new component will be part of a discriminated union by consulting our API reference on models. Check whether the relevant model field (e.g. <code>selectors</code> in <code>Filter</code> or <code>Parameter</code>) is described as a discriminated union (in this case the <code>SelectorType</code> is, but for example <code>OptionsType</code> is not).\u00a0\u21a9</p> </li> </ol>"},{"location":"pages/user_guides/dashboard/","title":"How to create a dashboard","text":"<p>This guide shows you how to configure and call a <code>Dashboard</code> using either pydantic models, python dictionaries, yaml or json.</p> <p>To create a dashboard, do the following steps:</p> <ol> <li>Choose one of the possible configuration syntaxes</li> <li>Create your <code>pages</code>, see our guide on Pages</li> <li>Choose a <code>theme</code> (optional, defaults to \"vizro_dark\"), see our guide on Themes</li> <li>Add your <code>dashboard</code> to the <code>build</code> call of Vizro</li> </ol> <p>Dashboard Configuration Syntaxes</p> app.py - pydantic modelsapp.py - python dictdashboard.yamldashboard.jsonResult <pre><code>import vizro.plotly.express as px\nfrom vizro import Vizro\nimport vizro.models as vm\ndf = px.data.iris()\npage = vm.Page(\ntitle=\"My first dashboard\",\ncomponents=[\nvm.Graph(id=\"scatter_chart\", figure=px.scatter(df, x=\"sepal_length\", y=\"petal_width\", color=\"species\")),\nvm.Graph(id=\"bar_chart\", figure=px.bar(df, x=\"sepal_width\", y=\"petal_length\", color=\"species\")),\n],\ncontrols=[\nvm.Filter(column=\"species\"),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code>import vizro.plotly.express as px\nfrom vizro import Vizro\ndf = px.data.iris()\npage = {\n\"title\": \"My first dashboard\",\n\"components\": [\n{\n\"type\": \"graph\",\n\"id\": \"scatter_chart\",\n\"figure\": px.scatter(\ndf,\nx=\"sepal_length\",\ny=\"petal_width\",\ncolor=\"species\",\n),\n},\n{\n\"type\": \"graph\",\n\"id\": \"bar_chart\",\n\"figure\": px.bar(df, x=\"sepal_width\", y=\"petal_length\", color=\"species\"),\n},\n],\n\"controls\": [\n{\n\"type\": \"filter\",\n\"column\": \"species\",\n},\n],\n}\ndashboard = {\"pages\": [page]}\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- figure:\n_target_: scatter\ndata_frame: iris\nx: sepal_length\ny: petal_width\ncolor: species\nid: scatter_chart\ntype: graph\n- figure:\n_target_: bar\ndata_frame: iris\nx: sepal_width\ny: petal_length\ncolor: species\nid: bar_chart\ntype: graph\ncontrols:\n- column: species\ntype: filter\ntitle: My first dashboard\n</code></pre> <pre><code>{\n\"pages\": [\n{\n\"components\": [\n{\n\"figure\": {\n\"_target_\": \"scatter\",\n\"color\": \"species\",\n\"data_frame\": \"iris\",\n\"x\": \"sepal_length\",\n\"y\": \"petal_width\"\n},\n\"id\": \"scatter_chart\",\n\"type\": \"graph\"\n},\n{\n\"figure\": {\n\"_target_\": \"bar\",\n\"color\": \"species\",\n\"data_frame\": \"iris\",\n\"x\": \"sepal_width\",\n\"y\": \"petal_length\"\n},\n\"id\": \"bar_chart\",\n\"type\": \"graph\"\n}\n],\n\"controls\": [\n{\n\"column\": \"species\",\n\"type\": \"filter\"\n}\n],\n\"title\": \"My first dashboard\"\n}\n]\n}\n</code></pre> <p></p> Additional <code>.py</code> files for <code>yaml</code> and <code>json</code> required <p>Note that in the <code>yaml</code> and <code>json</code> example an additional <code>.py</code> is required to register the data and parse the yaml/json configuration.</p> app.py for yamlapp.py for json <pre><code>from pathlib import Path\nimport yaml\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.managers import data_manager\nfrom vizro.models import Dashboard\ndata_manager[\"iris\"] = px.data.iris\ndashboard = yaml.safe_load(Path(\"dashboard.yaml\").read_text(encoding=\"utf-8\"))\ndashboard = Dashboard(**dashboard)\nif __name__ == \"__main__\":\nVizro().build(dashboard).run()\n</code></pre> <pre><code>import json\nfrom pathlib import Path\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.managers import data_manager\nfrom vizro.models import Dashboard\ndata_manager[\"iris\"] = px.data.iris\ndashboard = json.loads(Path(\"dashboard.json\").read_text(encoding=\"utf-8\"))\ndashboard = Dashboard(**dashboard)\nif __name__ == \"__main__\":\nVizro().build(dashboard).run()\n</code></pre> <p>After running the dashboard, you can access the dashboard via <code>localhost:8050</code>.</p>"},{"location":"pages/user_guides/data/","title":"How to connect your dashboard to data","text":"<p>This guide shows you how to connect your dashboard and your charts within the dashboard to data.</p> <p>Vizro provides two ways to connect your charts to data. This section shows you how to use both.</p>"},{"location":"pages/user_guides/data/#directly-feed-a-pandas-dataframe-to-your-chart","title":"Directly feed a Pandas DataFrame to your chart","text":"<p>You can directly feed a Pandas DataFrame to your chart. This is the simplest way to connect your charts to data.</p> <p>Feed a Pandas DataFrame</p> app.pyResult <pre><code>from vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\niris = px.data.iris()\npage = vm.Page(\ntitle=\"My first page\",\ncomponents=[\nvm.Graph(id=\"scatter_chart\", figure=px.scatter(iris, x=\"sepal_length\", y=\"petal_width\", color=\"species\")),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <p></p> <p>Here <code>px.data.iris()</code> returns a Pandas DataFrame. We then pass this DataFrame to the <code>figure</code> argument of the <code>Graph</code> component.</p> <p>Note</p> <p>If you are using JSON or YAML to define your dashboard, you can only use the data connector approach to connect your data.</p>"},{"location":"pages/user_guides/data/#use-a-data-connector","title":"Use a data connector","text":"<p>You can also connect your charts with a data connector. To use a data connector with Vizro, you need:</p> <ol> <li> <p>Define a data connector. A data connector is a function    that returns a Pandas DataFrame. In this function, you can define how to load your    data and then convert it to a Pandas DataFrame if necessary.</p> </li> <li> <p>Register this function with the Vizro Data Manager.    This allows you to use this data connector    in your dashboard.</p> </li> </ol> <p>Use a Data Connector</p> app.pyapp.yamlResult <pre><code>from vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\nfrom vizro.managers import data_manager\n# define a data connector\ndef retrieve_iris():\n\"\"\"This is a function that returns a Pandas DataFrame.\"\"\"\nreturn px.data.iris()\n# register the data connector with Vizro Data Manager\ndata_manager[\"iris\"] = retrieve_iris\npage = vm.Page(\ntitle=\"My first page\",\ncomponents=[\nvm.Graph(id=\"scatter_chart\", figure=px.scatter(\"iris\", x=\"sepal_length\", y=\"petal_width\", color=\"species\")),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration - see from_yaml example\npages:\n- components:\n- figure:\n_target_: scatter\ndata_frame: iris\nx: sepal_length\ny: petal_width\ncolor: species\nid: scatter_chart\ntype: graph\ntitle: My first page\n</code></pre> <p></p> <p>Note</p> <p>When you use a data connector, you reference the data by string. In the example, we use <code>px.scatter(\"iris\", x=\"sepal_length\", y=\"petal_width\", color=\"species\")</code> to reference the data. The string <code>\"iris\"</code> is the dataset name registered in Data Manager. This is how Vizro knows which data connector to use.</p>"},{"location":"pages/user_guides/data/#data-connector-with-arguments","title":"Data connector with arguments","text":"<p>You can also define a data connector with arguments. This is useful when you want to use the same data connector to load different data. For example, when you want to retrieve data from different tables in a database, you can define a data connector that accepts different SQL queries as arguments.</p> <p>Use a Data Connector with Arguments</p> app.py (use lambda)app.py (use functools.partial)Result <pre><code>from vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\nfrom vizro.managers import data_manager\ndef retrieve_one_species(species):\ndf = px.data.iris()\nsubset = df[df[\"species\"] == species].copy()\nreturn subset\ndata_manager[\"species_setosa\"] = lambda: retrieve_one_species(\"setosa\")\npage = vm.Page(\ntitle=\"My first page\",\ncomponents=[\nvm.Graph(id=\"scatter_chart\", figure=px.scatter(\"species_setosa\", x=\"sepal_length\", y=\"petal_width\", color=\"species\")),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code>from functools import partial\nfrom vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\nfrom vizro.managers import data_manager\ndef retrieve_one_species(species):\ndf = px.data.iris()\nsubset = df[df[\"species\"] == species].copy()\nreturn subset\ndata_manager[\"species_setosa\"] = partial(retrieve_one_species, \"setosa\")\npage = vm.Page(\ntitle=\"My first page\",\ncomponents=[\nvm.Graph(id=\"scatter_chart\", figure=px.scatter(\"species_setosa\", x=\"sepal_length\", y=\"petal_width\", color=\"species\")),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <p></p>"},{"location":"pages/user_guides/data/#kedro-data-catalog","title":"Kedro data catalog","text":"<p>If the data you are visualizing is a <code>kedro_datasets.pandas</code> type from a Kedro data catalog, you can leverage Vizro's Kedro integration to connect your charts to the data catalog.</p> <p>If it is not a <code>kedro_datasets.pandas</code> type, you need to build a data connector to load the data from the data catalog and convert it to a Pandas DataFrame, before you can register it with Vizro Data Manager.</p>"},{"location":"pages/user_guides/install/","title":"How to install Vizro","text":"<p>This guide shows you how to install Vizro. It will provide detailed explanation on how to install, update and verify the current version of vizro.</p>"},{"location":"pages/user_guides/install/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python: Vizro supports macOS, Linux, and Windows. It is designed to work with Python 3.8 and above. The python   version can be specified when setting up your virtual environment.</li> <li>Virtual environment: We suggest to create a new virtual environment for each new Vizro project you work on to   isolate its Python dependencies from those of other projects. See the following references to learn more about python virtual environments, conda virtual environments or watch an explainer video about them.</li> </ul> Beginners/Code novices <p>If you consider yourself a beginner or coding novice, you can follow the steps in these boxes to completely avoid the terminal usage</p> <ul> <li>install the Anaconda Navigator</li> <li>create a new environment as outlined here, choose a Python version <code>&gt;=3.8</code></li> </ul>"},{"location":"pages/user_guides/install/#install","title":"Install","text":"<p>To install Vizro from the Python Package Index (PyPI), use <code>pip</code> in your terminal window:</p> <pre><code>pip install vizro\n</code></pre> <p>You can run any code from the tutorials and user guides using a python script, but it is arguably more convenient to use a Jupyter notebook. In this case you can optionally install <code>jupyter</code>: <pre><code>pip install jupyter\n</code></pre></p> Beginners/Code novices <p>If you consider yourself a beginner or coding novice, you can follow the steps in these boxes to completely avoid the terminal usage</p> <ul> <li>search <code>vizro</code> and subsequently install it using the Anaconda Navigator package manager</li> <li>search <code>jupyter</code> and subsequently install it following the same procedure</li> <li>it should now be easy to launch a jupyter notebook</li> <li>you can paste any of the examples into a notebook cell, evaluate the cell and inspect the results - happy vizro'ing!</li> </ul>"},{"location":"pages/user_guides/install/#verify-version","title":"Verify version","text":"<p>Once Vizro is installed, if you would like to verify the version of Vizro or check if everything worked, simply run the following code from a python script or a Jupyter notebook cell:</p> <pre><code>import vizro\nprint(vizro.__version__)\n</code></pre> <p>You should see a return output of the form <code>0.1.0</code>.</p>"},{"location":"pages/user_guides/install/#upgrade","title":"Upgrade","text":"<p>To later upgrade Vizro to a different version, simply run: <pre><code>pip install vizro -U\n</code></pre></p> <p>The best way to safely upgrade is to check the release notes for any notable breaking changes before migrating an existing project.</p>"},{"location":"pages/user_guides/integration/","title":"How to integrate Vizro with other tools","text":"<p>This page describes how to integrate Vizro with other tools.</p>"},{"location":"pages/user_guides/integration/#kedro","title":"Kedro","text":"<p>Kedro is an open-source Python framework to create reproducible, maintainable, and modular data science code. For Pandas datasets registered in a Kedro data catalog, Vizro provides a convenient way to visualize them.</p>"},{"location":"pages/user_guides/integration/#installation","title":"Installation","text":"<p>To install Vizro with Kedro support, run:</p> <pre><code>pip install vizro[kedro]\n</code></pre>"},{"location":"pages/user_guides/integration/#using-datasets-from-the-kedro-data-catalog","title":"Using datasets from the Kedro data catalog","text":"<p>Given a Kedro data catalog (either from a kedro project or a <code>catalog.yml</code> style file), you can use the following code to register the datasets with <code>kedro_datasets.pandas</code> type to Vizro's data manager.</p> <p>Kedro Data Catalog</p> app.py (kedro project)app.py (use data catalog file YAML syntax without a kedro project) <pre><code>from vizro.integrations import kedro as kedro_integration\nfrom vizro.managers import data_manager\ncatalog = kedro_integration.catalog_from_project(\"/path/to/projects/iris\")\nfor dataset_name, dataset in kedro_integration.datasets_from_catalog(catalog).items():\ndata_manager[dataset_name] = dataset\n</code></pre> <pre><code>from kedro.io import DataCatalog\nimport yaml\nfrom vizro.integrations import kedro as kedro_integration\nfrom vizro.managers import data_manager\ncatalog = DataCatalog.from_config(yaml.safe_load(Path(\"catalog.yaml\").read_text(encoding=\"utf-8\")))\nfor dataset_name, dataset in kedro_integration.datasets_from_catalog(catalog).items():\ndata_manager[dataset_name] = dataset\n</code></pre>"},{"location":"pages/user_guides/layouts/","title":"How to use layouts","text":"<p>This guide shows you how to use the <code>Layout</code> to arrange charts/components on the screen and customize the grid specifications.</p> <p>The <code>Page</code> model accepts the <code>layout</code> argument, where you can input your <code>Layout</code> with a custom grid.</p>"},{"location":"pages/user_guides/layouts/#using-the-default-layout","title":"Using the default layout","text":"<p>The <code>layout</code> argument of the <code>Page</code> model is optional. If no layout is specified, all charts/components will automatically be stacked underneath each other. If that is your desired layout, you can create your charts/components without providing a <code>Layout</code>.</p> <p>Default Layout</p> app.pyapp.yamlResult <pre><code>from vizro import Vizro\nimport vizro.models as vm\npage = vm.Page(\ntitle=\"two_left\",\ncomponents=[vm.Card(text=\"\"\"# Component 0\"\"\"),\nvm.Card(text=\"\"\"# Component 1\"\"\")]\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- text: |\n# Component 0\ntype: card\n- text: |\n# Component 1\ntype: card\ntitle: two_left\n</code></pre> <p></p>"},{"location":"pages/user_guides/layouts/#customizing-the-grid-arrangement","title":"Customizing the grid arrangement","text":"<p>To customize the grid arrangement, you can configure the <code>grid</code> parameter of the <code>Layout</code> model. The example below shows how the grid works and how to specify a valid one:</p> Example<pre><code>grid = [[0, 1],\n[0, 2]]\n</code></pre> <ul> <li>The <code>grid</code> needs to be provided as <code>List[List[int]]</code> (e.g. <code>grid = [[0, 1], [0, 2]]</code>)</li> <li>The integers in the <code>grid</code> correspond to the index of the chart/component inside the list of <code>components</code> provided to <code>Page</code></li> <li>The number of integers in the <code>grid</code> needs to match the number of chart/components provided</li> <li>Each sub-list corresponds to a grid row (e.g. row 1 = <code>[0, 1]</code> and row 2 = <code>[0, 2]</code>)</li> <li>Each element inside the sub-list corresponds to a grid column (e.g. column 1 = <code>[0, 0]</code> and column 2 = <code>[1, 2]</code>)</li> <li>The integers in the <code>grid</code> need to be consecutive integers starting with 0 (e.g. <code>0</code>, <code>1</code>, <code>2</code>)</li> <li>Each chart/component will take the entire space of its grid area (empty spaces are currently not enabled)</li> <li>The area spanned by a chart/component in the grid must be rectangular</li> </ul> <p>To customize the grid arrangement, provide the relevant grid specification:</p> <p>Grid Arrangement</p> app.pyapp.yamlResult <pre><code>import vizro.models as vm\nfrom vizro import Vizro\npage = vm.Page(\ntitle=\"one_left_two_right\",\nlayout=vm.Layout(grid=[[0, 1],\n[0, 2]]),\ncomponents=[vm.Card(text=\"\"\"# Component 0\"\"\"),\nvm.Card(text=\"\"\"# Component 1\"\"\"),\nvm.Card(text=\"\"\"# Component 2\"\"\"),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- text: |\n# Component 0\ntype: card\n- text: |\n# Component 1\ntype: card\n- text: |\n# Component 2\ntype: card\nlayout:\ngrid: [[0, 1], [0, 2]]\ntitle: one_left_two_right\n</code></pre> <p></p>"},{"location":"pages/user_guides/layouts/#adding-empty-spaces-to-the-grid","title":"Adding empty spaces to the grid","text":"<p>One approach to organize the dashboard's layout involves integrating empty spaces. This can be achieved by specifying <code>-1</code> within your grid layout.</p> Example<pre><code>grid = [[0, 1, -1],\n[0, 2, -1]]\n</code></pre> <p>Adding Empty Spaces</p> app.pyapp.yamlResult <pre><code>import vizro.models as vm\nfrom vizro import Vizro\npage = vm.Page(\ntitle=\"Adding empty spaces\",\nlayout=vm.Layout(grid=[[0, 1, -1],\n[0, 2, -1]]),\ncomponents=[vm.Card(text=\"\"\"# Component 0\"\"\"),\nvm.Card(text=\"\"\"# Component 1\"\"\"),\nvm.Card(text=\"\"\"# Component 2\"\"\"),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- text: |\n# Component 0\ntype: card\n- text: |\n# Component 1\ntype: card\n- text: |\n# Component 2\ntype: card\nlayout:\ngrid: [[0, 1, -1], [0, 2, -1]]\ntitle: Adding empty spaces\n</code></pre> <p></p>"},{"location":"pages/user_guides/layouts/#using-custom-layout-examples","title":"Using custom layout examples","text":"<p>Below is a table of examples you can take as a reference to create some selected layouts:</p> Configuration Description Image <code>layout=Layout(grid=[[0]])</code> or  <code>layout=None</code> one_left <code>layout=Layout(grid=[[0],[1]])</code> or  <code>layout=None</code> two_left <code>layout=Layout(grid=[[0,1]])</code> two_top <code>layout=Layout(grid=[[0],[1],[2]])</code> or  <code>layout=None</code> three_left <code>layout=Layout(grid=[[0,1],[0,2]])</code> one_left_two_right <code>layout=Layout(grid=[[0,0],[1,2]])</code> one_top_two_bottom <code>layout=Layout(grid=[[0,1],[2,2]])</code> two_top_one_bottom <code>layout=Layout(grid=[[0,1],[0,2],[0,3]])</code> one_left_three_right <code>layout=Layout(grid=[[0,1],[2,3]])</code> two_left_two_right <code>layout=Layout(grid=[[0,3],[1,3],[2,3]])</code> three_left_one_right <code>layout=Layout(grid=[[0,0,0],[1,2,3]])</code> one_top_three_bottom <code>layout=Layout(grid=[[0,1,2],[3,3,3]])</code> three_top_one_bottom"},{"location":"pages/user_guides/layouts/#controlling-the-scroll-behavior","title":"Controlling the scroll behavior","text":"<p>By default, the grid will try to fit all charts/components on the screen. This can lead to distortions of the chart/component looking squeezed in. You can control the scroll behavior of the grid by specifying the following:</p> <ul> <li><code>row_min_height</code>: Sets a chart/component's minimum height. Defaults to 0px.</li> <li><code>col_min_width</code>: Sets a chart/component's minimum width. Defaults to 0px.</li> </ul> <p>Activate Scrolling</p> app.pyapp.yamlResult <pre><code>import vizro.models as vm\nfrom vizro import Vizro\npage = vm.Page(\ntitle=\"Activate scrolling\",\nlayout=vm.Layout(grid=[[i] for i in range(8)],\nrow_min_height=\"240px\"),\ncomponents=[vm.Card(text=\"\"\"# Component 0\"\"\"),\nvm.Card(text=\"\"\"# Component 1\"\"\"),\nvm.Card(text=\"\"\"# Component 2\"\"\"),\nvm.Card(text=\"\"\"# Component 3\"\"\"),\nvm.Card(text=\"\"\"# Component 4\"\"\"),\nvm.Card(text=\"\"\"# Component 5\"\"\"),\nvm.Card(text=\"\"\"# Component 6\"\"\"),\nvm.Card(text=\"\"\"# Component 7\"\"\"),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- text: |\n# Component 0\ntype: card\n- text: |\n# Component 1\ntype: card\n- text: |\n# Component 2\ntype: card\n- text: |\n# Component 2\ntype: card\n- text: |\n# Component 4\ntype: card\n- text: |\n# Component 5\ntype: card\n- text: |\n# Component 6\ntype: card\n- text: |\n# Component 7\ntype: card\nlayout:\ngrid: [[0], [1], [2], [3], [4], [5], [6], [7]]\nrow_min_height: 240px\ntitle: Activate scrolling\n</code></pre> <p></p>"},{"location":"pages/user_guides/layouts/#further-customizations","title":"Further customizations","text":"<p>For further customizations, such as changing the gap between row and column, please refer to the documentation of the <code>Layout</code> model.</p>"},{"location":"pages/user_guides/pages/","title":"How to use pages","text":"<p>This guide shows you how to add pages to your dashboard and customize the URL paths if needed. A <code>Page</code> lets you place and arrange your dashboard content (e.g., chart/components, tables, and text) and configure your dashboard interactions (e.g. filters and parameters).</p> <p>The <code>Dashboard</code> model accepts the <code>pages</code> argument, where you can insert your <code>Page</code>.</p>"},{"location":"pages/user_guides/pages/#creating-a-page","title":"Creating a page","text":"<p>A <code>Page</code> is split up into three main containers:</p> <ol> <li>The control container  where you can add your Controls to interact with the dashboard</li> <li>The page header that contains the page title and the theme toggle switch button</li> <li>The component container where you can add your Charts/Components to visualize your data</li> </ol> <p></p> <p>To create and add a page to your dashboard, do the following steps:</p> <ol> <li>Provide a <code>title</code> to your <code>Page</code></li> <li>Configure your <code>components</code>, see our guide on Charts/Components</li> <li>Configure your <code>controls</code> (optional), see our guide on Controls</li> <li>Configure your <code>layout</code> (optional), see our guide on Layouts</li> </ol> <p>Page</p> app.pyapp.yamlResult <pre><code>import vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\ngapminder = px.data.gapminder().query(\"year == 2007\")\npage = vm.Page(\ntitle=\"Page Title\",\ncomponents=[\nvm.Graph(\nid=\"sunburst\", figure=px.sunburst(gapminder, path=[\"continent\", \"country\"], values=\"pop\", color=\"lifeExp\")\n)\n],\ncontrols=[\nvm.Filter(column=\"continent\", targets=[\"sunburst\"]),\nvm.Parameter(targets=[\"sunburst.color\"], selector=vm.RadioItems(options=[\"lifeExp\", \"pop\"], title=\"Color\")),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- figure:\n_target_: sunburst\npath: ['continent', 'country']\nvalues: pop\ncolor: lifeExp\ndata_frame: gapminder\nid: sunburst\ntype: graph\ncontrols:\n- column: continent\ntargets:\n- sunburst\ntype: filter\n- selector:\noptions: ['lifeExp', 'pop']\ntitle: Color\ntype: radio_items\ntargets:\n- sunburst.color\ntype: parameter\ntitle: Page Title\n</code></pre> <p></p> <p>Note</p> <p>Note that a page selector dropdown is automatically added to your dashboard in the top-left of the control container. This dropdown allows navigating through the different pages.</p> <p>You can additionally navigate through the different pages by going directly to the relevant page URL (more details in next section).</p>"},{"location":"pages/user_guides/pages/#customizing-the-page-url","title":"Customizing the page URL","text":"<p>By default, the page URL is automatically generated based on the <code>id</code> of the page e.g., if <code>id=\"This is my first page\"</code> the generated page URL will be <code>path=this-is-my-first-page</code>. You can then access the page via <code>localhost:&lt;port_number&gt;/this-is-my-first-page</code>.</p> <p>Note that the page <code>id</code> defaults to be the same as the page <code>title</code> if not set. If you have multiple pages with the same <code>title</code> then you must assign a unique <code>id</code>.</p> <p>The first page always has the URL prefix <code>/</code> assigned. A custom URL can, therefore, not be created for the first page.</p> <p>To customize the page URL, provide a valid URL name to the <code>path</code> argument of <code>Page</code>:</p> <p>Page</p> app.pyapp.yaml <pre><code>import vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\ngapminder = px.data.gapminder().query(\"year == 2007\")\npage1 = vm.Page(\ntitle=\"Page 1\",\ncomponents=[\nvm.Card(\ntext=\"\"\"Commodi repudiandae consequuntur voluptatum.\"\"\",\n),\n],\n)\npage2 = vm.Page(\ntitle=\"Page 2\",\npath=\"my-custom-url\",\ncomponents=[\nvm.Graph(\nid=\"sunburst\", figure=px.sunburst(gapminder, path=[\"continent\", \"country\"], values=\"pop\", color=\"lifeExp\")\n)\n],\ncontrols=[\nvm.Filter(column=\"continent\", targets=[\"sunburst\"]),\nvm.Parameter(targets=[\"sunburst.color\"], selector=vm.RadioItems(options=[\"lifeExp\", \"pop\"], title=\"Color\")),\n],\n)\ndashboard = vm.Dashboard(pages=[page1, page2])\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- text: |\nCommodi repudiandae consequuntur voluptatum.\ntype: card\ntitle: Page 1\n- components:\n- figure:\n_target_: sunburst\npath: ['continent', 'country']\nvalues: pop\ncolor: lifeExp\ndata_frame: gapminder\nid: sunburst\ntype: graph\ncontrols:\n- column: continent\ntargets:\n- sunburst\ntype: filter\n- selector:\noptions: ['lifeExp', 'pop']\ntitle: Color\ntype: radio_items\ntargets:\n- sunburst.color\ntype: parameter\ntitle: Page 2\npath: my-custom-url\n</code></pre> <p>You can now access the first page via <code>localhost:&lt;port_number&gt;/</code> and the second page via <code>localhost:&lt;port_number&gt;/my-custom-url</code>.</p>"},{"location":"pages/user_guides/run/","title":"How to launch the dashboard","text":"<p>This guide shows you how to launch your dashboard in different ways. By default, your dashboard apps run on localhost.</p>"},{"location":"pages/user_guides/run/#default-built-in-web-server-in-flask","title":"Default built-in web server in flask","text":"<p>Default flask server</p> app.py <pre><code>from vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\niris = px.data.iris()\npage = vm.Page(\ntitle=\"My first page\",\ncomponents=[\nvm.Graph(id=\"scatter_chart\", figure=px.scatter(iris, x=\"sepal_length\", y=\"petal_width\", color=\"species\")),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n</code></pre> <ul> <li>create a python file named app.py.</li> <li>type the command <code>python app.py</code> into your terminal.</li> <li>information below will be displayed in your terminal, go to the http link. <pre><code>Dash is running on http://127.0.0.1:8050/\n\n * Serving Flask app 'app'\n * Debug mode: on\n</code></pre></li> </ul>"},{"location":"pages/user_guides/run/#launch-it-in-jupyter-environment","title":"Launch it in jupyter environment","text":"<p>The dashboard application can be launched in jupyter environment in <code>inline</code>, <code>external</code>, and <code>jupyterlab</code> mode.</p> <p>Run in jupyter notebook in inline mode</p> app.ipynb <pre><code>from vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\niris = px.data.iris()\npage = vm.Page(\ntitle=\"My first page\",\ncomponents=[\nvm.Graph(id=\"scatter_chart\", figure=px.scatter(iris, x=\"sepal_length\", y=\"petal_width\", color=\"species\")),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run(jupyter_mode=\"external\")\n</code></pre> <ul> <li>by default, the mode is set to <code>inline</code> in <code>run()</code> and the dashboard will be displayed inside your jupyter environment.</li> <li>you can specify <code>jupyter_mode=\"external\"</code> and a link will be displayed to direct you to the localhost where the dashboard is running.</li> <li>you can use tab mode by <code>jupyter_mode=\"tab\"</code> to automatically open the app in a new browser</li> </ul>"},{"location":"pages/user_guides/run/#launch-it-via-gunicorn","title":"Launch it via Gunicorn","text":"<p>In production</p> <p>In production, it is recommended not to use the default flask server. One of the options here is gunicorn. It is easy to scale the application to serve more users or run more computations, run more \"copies\" of the app in separate processes.</p> <p>Use gunicorn</p> app.py <pre><code>from vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\niris = px.data.iris()\npage = vm.Page(\ntitle=\"My first page\",\ncomponents=[\nvm.Graph(id=\"scatter_chart\", figure=px.scatter(iris, x=\"sepal_length\", y=\"petal_width\", color=\"species\")),\n],\n)\ndashboard = vm.Dashboard(pages=[page])\napp = Vizro().build(dashboard)\nserver = app.dash.server\n</code></pre> <p>You need to expose the server via <code>app.dash.server</code> in order to use gunicorn as your wsgi here. Run it via <pre><code>gunicorn app:server --workers 3\n</code></pre> in the cmd. For more gunicorn configuration, please refer to gunicorn docs</p>"},{"location":"pages/user_guides/themes/","title":"How to use themes","text":"<p>This guide shows you how to use themes. Themes are pre-designed collections of stylings that are applied to entire charts and dashboards. The themes provided by Vizro are induced with our design best practices that make charts and dashboards look visually consistent and professional.</p>"},{"location":"pages/user_guides/themes/#themes-in-dashboards","title":"Themes in dashboards","text":"<p>The <code>Dashboard</code> model accepts the <code>theme</code> argument, where you can currently choose between a <code>vizro_dark</code> and a <code>vizro_light</code> theme. This theme will be applied on the entire dashboard and its charts/components. During run-time you can still switch between the themes via the toggle button in the upper-right corner of the dashboard.</p> <p>Change theme</p> app.pyapp.yamlResult - vizro_lightResult - vizro_dark <pre><code>import vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\ndf = px.data.iris()\npage = vm.Page(\ntitle=\"Changing themes\",\ncomponents=[\nvm.Graph(\nfigure=px.scatter_matrix(\ndf, dimensions=[\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\"], color=\"species\"\n),\n),\n],\n)\ndashboard = vm.Dashboard(pages=[page], theme=\"vizro_light\")\nVizro().build(dashboard).run()\n</code></pre> <pre><code># Still requires a .py to register data connector in Data Manager and parse yaml configuration\n# See from_yaml example\npages:\n- components:\n- figure:\n_target_: scatter_matrix\ncolor: species\ndata_frame: iris\ndimensions: [\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\"]\ntype: graph\ntitle: Changing themes\ntheme: vizro_light\n</code></pre> <p></p> <p></p>"},{"location":"pages/user_guides/themes/#themes-in-plotly-charts","title":"Themes in plotly charts","text":"<p>You can also use our templates for plotly charts outside the dashboard. Our <code>vizro_dark</code> and <code>vizro_light</code> theme are automatically registered to <code>plotly.io.templates</code> when importing Vizro. You can find more details on how templates work in plotly.express here.</p>"},{"location":"pages/user_guides/themes/#set-themes-for-all-charts","title":"Set themes for all charts","text":"<p>The default plotly.io template is set to be <code>vizro_dark</code> as soon as you <code>import vizro</code>:</p> <pre><code>import plotly.io as pio\nimport vizro\npio.templates\n</code></pre> Result<pre><code>Templates configuration\n-----------------------\n    Default template: 'vizro_dark'\n    Available templates:\n        ['ggplot2', 'seaborn', 'simple_white', 'plotly',\n         'plotly_white', 'plotly_dark', 'presentation', 'xgridoff',\n         'ygridoff', 'gridon', 'none', 'vizro_dark', 'vizro_light']\n</code></pre> <p>All plotly charts run after the <code>import vizro</code> command will therefore have the <code>vizro_dark</code> template automatically applied without further configuration.</p> <p>To change the default plotly template globally, run:</p> <pre><code>import plotly.io as pio\npio.templates.default = \"vizro_light\"\n</code></pre>"},{"location":"pages/user_guides/themes/#set-themes-for-selected-charts","title":"Set themes for selected charts","text":"<p>To change the template for a selected chart only, use the <code>template</code> parameter and run:</p> <pre><code>import vizro.plotly.express as px\ndf = px.data.iris()\npx.scatter_matrix(df,\ndimensions=[\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\"],\ncolor=\"species\",\ntemplate=\"vizro_light\")\n</code></pre> <p>Note</p> <p>Please note that using <code>import vizro.plotly.express as px</code> is equivalent to using <code>import plotly.express as px</code>, but with the added benefit of being able to integrate the resulting chart code into a Vizro dashboard. Vizro offers a minimal layer on top of Plotly's existing charting library, allowing you to seamlessly use all the existing charts and functionalities provided by plotly.express without any modifications.</p>"}]}
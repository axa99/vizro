name: Check versions and build-publish

on:
    push:
      branches: [main]
    pull_request:
      branches:
        - "main"

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        pip install --upgrade hatch

    - name: Check which ðŸ“¦ needs to be released
      run: |
        packages=("vizro" "vizro-core")

        for package in "${packages[@]}"; do
            if [[ "$package" == "vizro" ]]; then
                cd vizro-core
            else
                cd $package
            fi
            version=$(hatch version)
            cd ..
            python tools/github_actions_release.py $package $version
        done

    - name: Set outputs
      id: version_check
      run: |
        echo "new_release=${{ env.NEW_RELEASE }}" >> $GITHUB_OUTPUT
        echo "package_name=${{ env.PACKAGE_NAME }}" >> $GITHUB_OUTPUT
        echo "package_version=${{ env.PACKAGE_VERSION }}" >> $GITHUB_OUTPUT
    outputs:
      new_release: ${{ steps.version_check.outputs.new_release }}
      package_name: ${{ steps.version_check.outputs.package_name }}
      package_version: ${{ steps.version_check.outputs.package_version }}

  build-publish:
      needs: [ check-version]
      if: |
        needs.check-version.outputs.new_release == 'true'
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch
      - name: Build package
        run: |
          package_name="${{ needs.check-version.outputs.package_name }}"
          if [[ "${package_name}" == "vizro" ]]; then
            cd vizro-core
          else
            cd "${package_name}"
          fi
          hatch build
        
      - name: Extract release notes from ${{needs.check-version.outputs.package_name}}/CHANGELOG.md
        id: extract
        run: |
          pwd
          formatted_date=$(date +"%Y-%m-%d")
          python ../tools/extract_release_notes.py \
          "${{needs.check-version.outputs.package_name}}/CHANGELOG.md" \
          "${{needs.check-version.outputs.package_version}} â€” $formatted_date"
    #   - name: Create GitHub Release
    #     uses: softprops/action-gh-release@v1
    #     with:
    #       tag_name: ${{needs.check-version.outputs.package_name}}-${{needs.check-version.outputs.package_version}}
    #       name: ${{needs.check-version.outputs.package_name}}-${{needs.check-version.outputs.package_version}}
    #       body_path: release_body.txt
    #       draft: true
    #       prerelease: true
    #       token: ${{ secrets.GH_TAGGING_TOKEN }}